{"version":3,"sources":["library/options/errors.js","components/MyPage/Section/MyBoardList.js","components/common/Pagination.js","components/MyPage/Section/MyComment.js","components/BoardQuoteMaster/Section/Like/MyLikeBoard.js","components/MyPage/Section/MyFavorite.js","styles/mypage/styles.js","components/MyPage/Section/TabMenu.js","components/MyPage/PageList.js","components/MyPage/Section/Profile.js","styles/form/change-styles.js","components/MyPage/Section/Email.js","components/MyPage/Section/Uploader.js","components/MyPage/Section/Password.js","components/MyPage/Section/MyReply.js","components/MyPage/Section/MyEditComment.js","pages/MyPage.js"],"names":["EmailError","required","checkPattern","PasswordError","minLength","maxLength","checkLower","checkUpper","checkSpec","checkLang","PasswordConfirmError","validate","NameError","withRouter","history","dispatch","useDispatch","userFrom","localStorage","getItem","useState","setMyBoard","boardTitle","boardContent","inputs","useEffect","getMyBoard","then","response","payload","success","boards","alert","BoardUI","className","styled","tbody","Paging","page","count","setPage","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","prevPageText","nextPageText","onChange","CommentsFrom","setCommentsFrom","onRemove","id","filter","_id","getMyComment","saveOptions","comments","commentsList","forEach","element","push","boardFrom","Set","map","JSON","stringify","parse","length","NothingBox","NothingAlert","board","index","Fragment","AddBoard","user","time","createdAt","writer","boardWriter","title","content","div","p","props","currentUser","window","AddBoardBox","BoardHeader","style","display","NameBox","Writer","GithubImg","src","Github","alt","onClick","open","github","TimeBox","DeleteBoardBox","DeleteBoard","to","Title","Content","textAlign","LikeButton","boardId","CommentButton","img","span","myFavorites","setMyFavorites","likeList","likes","catch","e","getMyFavorite","href","MyPageBox","MyPageTitle","li","MyPagefollow","MyInform","MyChange","MenuList","Orgchart","activeIndex","setActiveIndex","tabClickHandler","tabContArr","tabTitle","tabCont","section","Profile","ProfileLeft","Box","Img","go","name","h1","FormBox","form","UploaderBox","ProfileBox","ContentBox","InputBox","FilledInput","input","ErrorMessage","PasswordBox","PasswordButton","RegistButton","button","useForm","mode","register","handleSubmit","watch","errors","formState","ShowPassword","setShowPassword","ShowPassword2","setShowPassword2","password","useRef","current","newPassword","oldEmail","getOldEmail","handleVisibility","getEmail","email","onSubmit","useCallback","updatePassword","changeSuccess","message","confirm","withdrawalUser","updateEmail","htmlFor","value","readOnly","type","placeholder","pattern","maxLenght","every","test","checkNumber","IconButton","currentPassword","passwordConfirm","App","files","setFiles","oldName","getOldName","getName","updateName","RepliesFrom","setRepliesFrom","show","setShow","commentId","getCommentId","getMyReply","replies","repliesList","commentFrom","comment","CommentUl","AddComment","commentWriter","commentTitle","commentContent","ReplyImg","Reply","ReplyInput","writerFrom","ul","MyComment","setMyComment","setInput","preventDefault","updateComment","location","replace","EditForm","target","EditButton","match","exact","path","component","PageList","Email","Password","MyBoardList","MyEditComment","MyReply","MyFavorite","Withdrawal"],"mappings":"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","file":"static/js/9.bafb6142.chunk.js","sourcesContent":["// 이메일\r\nexport const EmailError = {\r\n  required: '이메일을 입력해주세요.',\r\n  checkPattern: '이메일 형식이 올바르지 않습니다.',\r\n};\r\n\r\n// 비밀번호\r\nexport const PasswordError = {\r\n  required: '비밀번호를 입력해주세요.',\r\n  minLength: '비밀번호를 8글자 이상 입력해주세요.',\r\n  maxLength: '비밀번호를 20글자 이내로 입력해주세요.',\r\n  checkLower: '비밀번호에 소문자를 포함해주세요.',\r\n  checkUpper: '비밀번호에 대문자를 포함해주세요.',\r\n  checkSpec: '비밀번호에 특수문자를 포함해주세요.',\r\n  checkLang: '비밀번호에 한글은 포함할 수 없습니다.',\r\n};\r\n\r\n// 비밀번호 확인\r\nexport const PasswordConfirmError = {\r\n  required: '비밀번호를 다시 입력해주세요.',\r\n  validate: '비밀번호가 일치하지 않습니다.',\r\n};\r\n\r\n// 이름\r\nexport const NameError = {\r\n  required: '닉네임을 입력해주세요.',\r\n  minLength: '닉네임을 2글자 이상 입력해주세요.',\r\n  maxLength: '닉네임을 10글자 이내로 작성해주세요.',\r\n};\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getMyBoard } from 'modules/actions/user';\r\nimport { updateBoard } from 'modules/actions/board';\r\nimport AddBoard from 'components/BoardQuoteMaster/Section/Board/AddBoard';\r\nimport styled from 'styled-components';\r\n\r\nfunction MyBoardList({ history }) {\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [MyBoard, setMyBoard] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [boardId, getBoardId] = useState('');\r\n  const [inputs, setInput] = useState({\r\n    boardTitle: '',\r\n    boardContent: '',\r\n  });\r\n  const { boardTitle, boardContent } = inputs;\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    setInput({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onRemove = id => {\r\n    setMyBoard(MyBoard.filter(MyBoard => MyBoard._id !== id));\r\n    history.push('/mypage/boardlist');\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (!boardTitle) {\r\n      alert('제목을 작성해주세요.');\r\n      return;\r\n    } else if (!boardContent) {\r\n      alert('내용을 작성해주세요.');\r\n      return;\r\n    } else if (boardContent.length > 300) {\r\n      alert('내용을 300자 이내로 작성해주세요.');\r\n      return;\r\n    }\r\n    dispatch(\r\n      updateBoard(userFrom, boardId, {\r\n        boardTitle: boardTitle,\r\n        boardContent: boardContent,\r\n      }),\r\n    ).then(response => {\r\n      if (!response.payload.success) {\r\n        alert('게시글 수정에 실패했습니다.');\r\n      } else {\r\n        if (response.payload.success) {\r\n          alert('게시글이 수정되었습니다.');\r\n          window.location.replace('/mypage/boardList');\r\n        } else {\r\n          alert(response.payload.message);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getMyBoard({ userFrom: userFrom })).then(response => {\r\n      if (response.payload.success) {\r\n        setMyBoard(response.payload.boards);\r\n      } else {\r\n        alert('게시글 정보를 가져오는데 실패했습니다.');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <BoardUI>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th>\r\n              <th className=\"date\">일자</th>\r\n              <th>글 제목</th>\r\n              <th>본문 내용</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"num\">1</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">2</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">3</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">4</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">5</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </BoardUI>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyBoardList);\r\n\r\nconst BoardUI = styled.tbody`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border-collapse: separate;\r\n  border-spacing: 0 10px;\r\n\r\n  .num {\r\n    width: 5%;\r\n    text-align: center;\r\n  }\r\n  .date {\r\n    width: 7%;\r\n  }\r\n  .title {\r\n    width: 25%;\r\n    text-align: center;\r\n  }\r\n  .content {\r\n    width: 63%;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    font-size: 14px;\r\n    border-top: 1px solid #444444;\r\n    margin-top: 7px;\r\n  }\r\n\r\n  td {\r\n    text-aligh: left;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n  th {\r\n    padding: 15px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  thead {\r\n    font-family: 'SCDream-bold';\r\n    font-weight: 100;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport './Paging.css';\r\nimport Pagination from 'react-js-pagination';\r\n\r\nconst list = [\r\n  {\r\n    id: 'a',\r\n    firstname: 'Robin',\r\n    lastname: 'Wieruch',\r\n    year: 1988,\r\n  },\r\n];\r\n\r\nconst ComplexList = () => (\r\n  <ul>\r\n    {list.map(item => (\r\n      <li key={item.id}>\r\n        <div>{item.id}</div>\r\n        <div>{item.firstname}</div>\r\n        <div>{item.lastname}</div>\r\n        <div>{item.year}</div>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst ManageEvents = ({ match, history }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { count, page, items } = useSelector(\r\n    ({ event }) => ({\r\n      count: event.count,\r\n      page: event.page,\r\n      itemts: event.items,\r\n    }),\r\n    shallowEqual,\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(eventActions.getEvents());\r\n  }, []);\r\n\r\n  const setPage = useCallback(\r\n    page => {\r\n      dispatch(eventActions.getEvents(page));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <EventList events={items} match={match} />\r\n      <Paging page={page} count={count} setPage={setPage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Paging = ({ page, count, setPage }) => {\r\n  return (\r\n    <Pagination\r\n      activePage={page}\r\n      itemsCountPerPage={5}\r\n      totalItemsCount={count}\r\n      pageRangeDisplayed={5}\r\n      prevPageText={'‹'}\r\n      nextPageText={'›'}\r\n      onChange={setPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Paging;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getMyComment } from 'modules/actions/user';\r\nimport AddBoard from 'components/BoardQuoteMaster/Section/Board/AddBoard';\r\nimport styled from 'styled-components';\r\nimport Paging from 'components/common/Pagination';\r\n\r\nfunction MyComment() {\r\n  const dispatch = useDispatch();\r\n  const [CommentsFrom, setCommentsFrom] = useState([]);\r\n\r\n  const onRemove = id => {\r\n    setCommentsFrom(\r\n      CommentsFrom.filter(CommentsFrom => CommentsFrom._id !== id),\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userFrom = localStorage.getItem('userId');\r\n    dispatch(getMyComment({ userFrom: userFrom })).then(response => {\r\n      if (response.payload.success) {\r\n        saveOptions(response.payload.comments);\r\n      } else {\r\n        alert('댓글을 불러오는데 실패했습니다.');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const saveOptions = comments => {\r\n    const commentsList = [];\r\n\r\n    comments.forEach(element => {\r\n      commentsList.push(element.boardFrom);\r\n    });\r\n    setCommentsFrom(\r\n      [...new Set(commentsList.map(JSON.stringify))].map(JSON.parse),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BoardUI>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th>\r\n              <th className=\"date\">일자</th>\r\n              <th>글 제목</th>\r\n              <th>본문 내용</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"num\">1</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">2</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">3</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">4</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">5</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </BoardUI>\r\n      <Paging />\r\n      {CommentsFrom.length === 0 && (\r\n        <NothingBox>\r\n          <NothingAlert>댓글 목록이 없습니다.</NothingAlert>\r\n        </NothingBox>\r\n      )}\r\n      {CommentsFrom &&\r\n        CommentsFrom.map((board, index) => {\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <AddBoard\r\n                id={board._id}\r\n                user={board.userFrom}\r\n                time={board.createdAt}\r\n                writer={board.boardWriter}\r\n                title={board.boardTitle}\r\n                content={board.boardContent}\r\n                onRemove={onRemove}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyComment);\r\n\r\nconst NothingBox = styled.div`\r\n  display: flex;\r\n  height: 500px;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst NothingAlert = styled.p`\r\n  font-size: 25px;\r\n  color: #ff0200;\r\n`;\r\n\r\nconst BoardUI = styled.tbody`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border-collapse: separate;\r\n  border-spacing: 0 10px;\r\n\r\n  .num {\r\n    width: 5%;\r\n    text-align: center;\r\n  }\r\n  .date {\r\n    width: 7%;\r\n  }\r\n  .title {\r\n    width: 25%;\r\n    text-align: center;\r\n  }\r\n  .content {\r\n    width: 63%;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    font-size: 14px;\r\n    border-top: 1px solid #444444;\r\n    margin-top: 7px;\r\n  }\r\n\r\n  td {\r\n    text-aligh: left;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n  th {\r\n    padding: 15px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  thead {\r\n    font-family: 'SCDream-bold';\r\n    font-weight: 100;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport UpdateTime from 'library/utils/updateTime';\r\nimport DeleteBoard from 'components/BoardQuoteMaster/Section/Board/DeleteBoard';\r\nimport LikeButton from './LikeButton';\r\nimport CommentButton from '../Comment/CommentButton';\r\nimport Github from 'assests/Github.png';\r\nimport styled from 'styled-components';\r\n\r\nfunction MyLikeBoard(props) {\r\n  const currentUser = window.localStorage.getItem('userId');\r\n\r\n  return (\r\n    <>\r\n      <AddBoardBox key={props.id}>\r\n        <div>\r\n          <BoardHeader style={{ display: 'flex' }}>\r\n            <NameBox>\r\n              <Writer>{props.writer}</Writer>\r\n              <GithubImg\r\n                src={Github}\r\n                alt=\"GitHub\"\r\n                onClick={() => window.open(`${props.user.github}`, '_blank')}\r\n              />\r\n            </NameBox>\r\n            <TimeBox>\r\n              <UpdateTime time={props.time} />\r\n            </TimeBox>\r\n            <DeleteBoardBox>\r\n              {props.user === currentUser ? (\r\n                <>\r\n                  <DeleteBoard\r\n                    board={props.id}\r\n                    user={props.user}\r\n                    history={props.history}\r\n                    onRemove={props.onRemove}\r\n                  />\r\n                </>\r\n              ) : null}\r\n            </DeleteBoardBox>\r\n          </BoardHeader>\r\n        </div>\r\n        <Link to={`/board/${props.id}`}>\r\n          <Title>{props.title}</Title>\r\n          <Content>{props.content}</Content>\r\n        </Link>\r\n        <div style={{ textAlign: 'right' }}>\r\n          <LikeButton\r\n            boardId={props.id}\r\n            boardWriter={props.writer}\r\n            boardTitle={props.title}\r\n            boardContent={props.content}\r\n          />\r\n          <Link to={`/board/${props.id}`}>\r\n            <CommentButton boardId={props.id} />\r\n          </Link>\r\n        </div>\r\n      </AddBoardBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyLikeBoard);\r\n\r\nconst GithubImg = styled.img`\r\n  width: 28px;\r\n  height: 28px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst AddBoardBox = styled.div`\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Writer = styled.span`\r\n  width: 60px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  padding-top: 3px;\r\n  font-weight: 500;\r\n  color: #fff;\r\n  background-color: #1a83ff;\r\n  border-radius: 5px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TimeBox = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 30px;\r\n  font-size: 14px;\r\n  padding-top: 3px;\r\n  justify-content: flex-end;\r\n  color: #aaa;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst BoardHeader = styled.span`\r\n  width: 97%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst NameBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 20px;\r\n  padding-left: 10px;\r\n`;\r\nconst Content = styled.div`\r\n  font-size: 13px;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst DeleteBoardBox = styled.div``;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { likeList } from 'modules/actions/like';\r\nimport MyLikeBoard from 'components/BoardQuoteMaster/Section/Like/MyLikeBoard';\r\nimport styled from 'styled-components';\r\n\r\nfunction myFavorite() {\r\n  const dispatch = useDispatch();\r\n  const [myFavorites, setMyFavorites] = useState([]);\r\n\r\n  const getMyFavorite = () => {\r\n    const userFrom = localStorage.getItem('userId');\r\n    dispatch(likeList({ userFrom: userFrom }))\r\n      .then(response => {\r\n        setMyFavorites(response.payload.likes);\r\n      })\r\n      .catch(e => alert('좋아요한 게시글을 불러오는데 실패했습니다,'));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyFavorite();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <BoardUI>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th>\r\n              <th className=\"date\">일자</th>\r\n              <th className=\"user\">글쓴이</th>\r\n              <th>글 제목</th>\r\n              <th>본문 내용</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"num\">1</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"user\">글쓴이</td>\r\n\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">2</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"user\">글쓴이</td>\r\n\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">3</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"user\">글쓴이</td>\r\n\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">4</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"user\">글쓴이</td>\r\n\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"num\">5</td>\r\n              <td className=\"date\">2022.07.24</td>\r\n              <td className=\"user\">글쓴이올시다</td>\r\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\r\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </BoardUI>\r\n      {myFavorites.length === 0 && (\r\n        <NothingBox>\r\n          <NothingAlert>좋아요한 게시글이 없습니다.</NothingAlert>\r\n        </NothingBox>\r\n      )}\r\n      {myFavorites &&\r\n        myFavorites.map((likes, index) => {\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <MyLikeBoard\r\n                href=\"{`../board/${likes.boardFrom}`}\"\r\n                id={likes.boardFrom}\r\n                time={likes.createdAt}\r\n                writer={likes.boardWriter}\r\n                title={likes.boardTitle}\r\n                content={likes.boardContent}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(myFavorite);\r\n\r\nconst NothingBox = styled.div`\r\n  display: flex;\r\n  height: 500px;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst NothingAlert = styled.p`\r\n  font-size: 25px;\r\n  color: #ff0200;\r\n`;\r\n\r\nconst BoardUI = styled.tbody`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border-collapse: separate;\r\n  border-spacing: 0 10px;\r\n\r\n  .num {\r\n    width: 5%;\r\n    text-align: center;\r\n  }\r\n  .date {\r\n    width: 5%;\r\n  }\r\n  .user {\r\n    text-align: center;\r\n\r\n    width: 10%;\r\n  }\r\n  .title {\r\n    width: 25%;\r\n    text-align: center;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    font-size: 14px;\r\n    border-top: 1px solid #444444;\r\n    margin-top: 7px;\r\n  }\r\n\r\n  td {\r\n    text-aligh: left;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n  th {\r\n    padding: 15px;\r\n    border-bottom: 1px solid #444444;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  thead {\r\n    font-family: 'SCDream-bold';\r\n    font-weight: 100;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const MyPageBox = styled.div`\r\n  font-family: 'SCDream';\r\n  font-weight: 700;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  .profile {\r\n    width: 55px;\r\n    height: 55px;\r\n    margin-left: 46%;\r\n  }\r\n\r\n  .id {\r\n    margin: 0 auto;\r\n    font-weight: 800;\r\n    margin-top: 5px;\r\n  }\r\n`;\r\n\r\nexport const MyPageTitle = styled.li`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 25px;\r\n  padding-top: 3px;\r\n  font-weight: bold;\r\n  color: Green;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const MyPagefollow = styled.li`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: black;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n\r\n  div {\r\n    margin-right: 5px;\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nexport const MyInform = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  padding-top: 3px;\r\n  font-weight: 600;\r\n  color: black;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const MyChange = styled.div`\r\n  margin-bottom: 10px;\r\n\r\n  ul {\r\n    list-style: none;\r\n    justify-content: center;\r\n    display: flex;\r\n    margin-top: 10px;\r\n  }\r\n  li {\r\n    box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\r\n    border-radius: 10px;\r\n    background-color: #c5ad81;\r\n    color: #fff;\r\n    padding: 7px;\r\n    font-size: 12px;\r\n    float: left;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nexport const MyPageList = styled.div`\r\n  box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  margin-bottom: 30px;\r\n  background-color: #eee;\r\n`;\r\n\r\nexport const MenuList = styled.div`\r\n  .menu-list {\r\n    display: flex;\r\n    padding: 7px;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .submenu {\r\n    margin-right: 25px;\r\n    cursor: pointer;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .submenu:hover {\r\n    font-family: 'SCDream-bold';\r\n    font-weight: 100;\r\n  }\r\n\r\n  .focused {\r\n    font-family: 'SCDream-bold';\r\n    font-weight: 100;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport MyBoardList from './MyBoardList';\r\nimport MyComment from './MyComment';\r\nimport Favorite from './MyFavorite';\r\nimport { MenuList } from 'styles/mypage/styles';\r\n\r\nexport default function Orgchart() {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n\r\n  const tabClickHandler = index => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const tabContArr = [\r\n    {\r\n      tabTitle: (\r\n        <li\r\n          className={activeIndex === 0 ? 'submenu focused' : 'submenu'}\r\n          onClick={() => tabClickHandler(0)}\r\n        >\r\n          저장한 게시글\r\n        </li>\r\n      ),\r\n      tabCont: (\r\n        <div>\r\n          <Favorite />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      tabTitle: (\r\n        <li\r\n          className={activeIndex === 1 ? 'submenu focused' : 'submenu'}\r\n          onClick={() => tabClickHandler(1)}\r\n        >\r\n          내가 쓴 게시글\r\n        </li>\r\n      ),\r\n      tabCont: (\r\n        <div>\r\n          <MyBoardList />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      tabTitle: (\r\n        <li\r\n          className={activeIndex === 2 ? 'submenu focused' : 'submenu'}\r\n          onClick={() => tabClickHandler(2)}\r\n        >\r\n          내가 쓴 댓글\r\n        </li>\r\n      ),\r\n      tabCont: (\r\n        <div>\r\n          <MyComment />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <hr className=\"line\"></hr>\r\n      <MenuList>\r\n        <ul className=\"menu-box\">\r\n          <div className=\"element\">\r\n            <li className=\"menu-list\">\r\n              {tabContArr.map((section, index) => {\r\n                return section.tabTitle;\r\n              })}\r\n            </li>\r\n          </div>\r\n        </ul>\r\n      </MenuList>\r\n\r\n      <div>{tabContArr[activeIndex].tabCont}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport Profile from 'assests/Profile.png';\r\nimport Tab from './Section/TabMenu';\r\nimport {\r\n  MyPageBox,\r\n  MyPageTitle,\r\n  MyPageList,\r\n  MyPagefollow,\r\n  MyInform,\r\n  MyChange,\r\n} from 'styles/mypage/styles';\r\n\r\nfunction PageList() {\r\n  return (\r\n    <>\r\n      <MyPageBox>\r\n        <MyPageTitle>MY PAGE</MyPageTitle>\r\n        <img src={Profile} className=\"profile\" />\r\n\r\n        <div className=\"id\">쿼억하</div>\r\n        <MyChange>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/mypage/email\">개인정보 수정</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/mypage/password\">프로필 수정</Link>\r\n            </li>\r\n          </ul>\r\n        </MyChange>\r\n        <MyPagefollow>\r\n          <div>Follower</div>0<div>Following</div>0\r\n        </MyPagefollow>\r\n        <MyInform>안녕하세요 쿼억하 입니다. 행복하세요 ^^</MyInform>\r\n        <Tab />\r\n      </MyPageBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(PageList);\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport Profile from 'assests/Profile.png';\r\n\r\nconst ProfileLeft = props => {\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Title>PROFILE</Title>\r\n        <Img>\r\n          <div>\r\n            <img src={Profile} className=\"imgFile\" />\r\n          </div>\r\n        </Img>\r\n        <div className=\"name\"> 쿼억카</div>\r\n        <div className=\"right\">\r\n          <Link to={props.go}>{props.name}</Link>\r\n        </div>\r\n        <div className=\"follow\">Follower0Following0</div>\r\n        <div className=\"inform\">안녕하세요 쿼카에오 만나서 반가워오</div>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileLeft;\r\n\r\nconst Box = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  margin-top: 10px;\r\n  .name {\r\n    font-weight: 800;\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n  }\r\n  .right {\r\n    box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\r\n    border-radius: 5px;\r\n    background-color: #c5ad81;\r\n    color: #fff;\r\n    padding: 9px;\r\n    font-size: 12px;\r\n    float: left;\r\n    font-weight: 900;\r\n    margin-bottom: 10px;\r\n  }\r\n  .follow {\r\n    font-size: 14px;\r\n    margin-bottom: 10px;\r\n    font-weight: 700;\r\n  }\r\n  .inform {\r\n    font-size: 12px;\r\n    margin-bottom: 10px;\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nconst Img = styled.div`\r\n  .imgFile {\r\n    width: 100px;\r\n  }\r\n  margin-top: 15px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-family: SCDream-thick;\r\n  font-size: 30px;\r\n  font-weight: 900;\r\n  letter-spacing: 1.2px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const FormBox = styled.form`\r\n  display: float;\r\n\r\n  .google-img {\r\n    width: 30px;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\nexport const UploaderBox = styled.div`\r\n  width: 375px;\r\n`;\r\nexport const ProfileBox = styled.form`\r\n  width: 60%;\r\n  padding: 5%;\r\n  margin-left: -100px;\r\n`;\r\nexport const ContentBox = styled.form`\r\n  width: 70%;\r\n  margin-right: -100px;\r\n`;\r\n\r\nexport const Title = styled.form`\r\n  font-famliy: SCDream-thick;\r\n  font-size: 21px;\r\n  font-weight: 900;\r\n  display: flex;\r\n  justify-content: left;\r\n  margin-left: 10px;\r\n  margin-bottom: 12px;\r\n  margin-top: 10px;\r\n  letter-spacing: 1.2px;\r\n`;\r\n\r\nexport const FormSmallTitle = styled.h1`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  margin-bottom: 13px;\r\n`;\r\n\r\nexport const InputBox = styled.div`\r\n  margin-bottom: 3px;\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  margin-left: 20px;\r\n  flex-direction: column;\r\n  align-items: start;\r\n  & label {\r\n    display: flex;\r\n    align-items: start;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    margin-right: 220px;\r\n  }\r\n  &: focus-within {\r\n    color: #4957a5;\r\n  }\r\n`;\r\n\r\n/**아이디 비밀번호 치는 디자인width280px이었음. */\r\nexport const FilledInput = styled.input`\r\n  position: relative;\r\n  width: 380px;\r\n  height: 48px;\r\n  padding: 0 20px;\r\n  border: 1px solid #eee;\r\n  border-radius: 8px;\r\n  background-color: #eee;\r\n  font-weight: 500;\r\n`;\r\nexport const GoogleImg = styled.img`\r\n  width: 10px;\r\n`;\r\nexport const ErrorMessage = styled.p`\r\n  color: #de506b;\r\n  font-size: 11px;\r\n  padding: 4px 4px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const PasswordBox = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const PasswordButton = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 300px;\r\n`;\r\n\r\nexport const LoginButton = styled.button`\r\n  margin: 0 auto;\r\n  width: 280px;\r\n  height: 50px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  background-color: #c5ad81;\r\n  color: #fff;\r\n  font-weight: 700;\r\n\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport const TextBox = styled.div`\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  padding-right: 17px;\r\n  & span {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    color: #aaa;\r\n  }\r\n  & a span {\r\n    color: #c5ad81;\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nexport const RadioBox = styled.div`\r\n  margin-top: 10px;\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  margin-left: 110px;\r\n  flex-direction: row;\r\n  align-items: start;\r\n  font-size: 14px;\r\n  & label {\r\n    display: flex;\r\n    align-items: start;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    margin-right: 140px;\r\n  }\r\n  &: focus-within {\r\n    color: #4957a5;\r\n  }\r\n`;\r\n\r\nexport const RegistButton = styled.button`\r\n  margin: 0 auto;\r\n  width: 380px;\r\n  height: 50px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  background-color: #c5ad81;\r\n  color: #fff;\r\n  font-weight: 700;\r\n  margin-top: 10px;\r\n  margin-bottom: 40px;\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport { updatePassword } from 'modules/actions/user';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { withdrawalUser } from 'modules/actions/user';\r\nimport { getEmail, updateEmail } from 'modules/actions/user';\r\nimport { PasswordError, PasswordConfirmError } from 'library/options/errors';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Profile from './Profile';\r\nimport {\r\n  FormBox,\r\n  ProfileBox,\r\n  ContentBox,\r\n  FormTitle,\r\n  ErrorMessage,\r\n  InputBox,\r\n  FilledInput,\r\n  PasswordBox,\r\n  PasswordButton,\r\n  RegistButton,\r\n  Title,\r\n} from 'styles/form/change-styles';\r\n\r\nfunction Email({ history }) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: 'onTouched',\r\n  });\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [ShowPassword, setShowPassword] = useState(false);\r\n  const [ShowPassword2, setShowPassword2] = useState(false);\r\n  const password = useRef();\r\n  password.current = watch('password');\r\n\r\n  const newPassword = useRef();\r\n  newPassword.current = watch('newPassword');\r\n  const [oldEmail, getOldEmail] = useState('');\r\n  const handleVisibility = () => {\r\n    setShowPassword(!ShowPassword);\r\n  };\r\n\r\n  const handleVisibility2 = () => {\r\n    setShowPassword2(!ShowPassword2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getEmail(userFrom)).then(response => {\r\n      getOldEmail(response.payload.email);\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(user => {\r\n    user._id = localStorage.getItem('userId');\r\n    dispatch(updatePassword(user)).then(response => {\r\n      if (!response.payload.changeSuccess) {\r\n        alert(response.payload.message);\r\n      } else {\r\n        if (response.payload.changeSuccess) {\r\n          alert('비밀번호가 변경되었습니다.');\r\n          history.push('/mypage');\r\n        } else {\r\n          alert('비밀번호 변경에 실패했습니다.');\r\n        }\r\n      }\r\n    });\r\n\r\n    user._id = localStorage.getItem('userId');\r\n    let confirmWithdrawal = window.confirm(\r\n      '탈퇴하시겠습니까?                                                                              ※ 개인정보, 모든 게시물 등의 데이터가 삭제되며, 복구할 수 없습니다. ※',\r\n    );\r\n    confirmWithdrawal &&\r\n      dispatch(withdrawalUser(user)).then(response => {\r\n        if (!response.payload.changeSuccess) {\r\n          alert(response.payload.message);\r\n        } else {\r\n          if (response.payload.changeSuccess) {\r\n            alert('회원탈퇴가 완료되었습니다.');\r\n            history.push('/');\r\n          } else {\r\n            alert('회원탈퇴에 실패했습니다.');\r\n          }\r\n        }\r\n      });\r\n    user._id = userFrom;\r\n    dispatch(updateEmail(user)).then(response => {\r\n      if (!response.payload.changeSuccess) {\r\n        alert(response.payload.message);\r\n      } else {\r\n        if (response.payload.changeSuccess) {\r\n          alert('이메일이 변경되었습니다.');\r\n          history.push('/mypage');\r\n        } else {\r\n          alert(response.payload.message);\r\n        }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n      <ProfileBox className=\"left\">\r\n        <Profile name={'프로필 수정'} go={'/mypage/password'} />\r\n      </ProfileBox>\r\n      <ContentBox className=\"right\">\r\n        <Title>이메일 변경</Title>\r\n\r\n        <InputBox>\r\n          <label htmlFor=\"oldEmail\">현재 이메일</label>\r\n          <FilledInput\r\n            id=\"oldEmail\"\r\n            name=\"oldEmail\"\r\n            value={oldEmail}\r\n            readOnly\r\n          />\r\n        </InputBox>\r\n        <InputBox>\r\n          <label htmlFor=\"email\">변경할 이메일</label>\r\n          <FilledInput\r\n            id=\"email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"변경할 이메일을 입력하세요\"\r\n            {...register('email', {\r\n              required: '이메일을 입력하세요',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                message: '이메일 형식이 올바르지 않습니다',\r\n              },\r\n            })}\r\n          />\r\n          {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}\r\n        </InputBox>\r\n        <InputBox>\r\n          <label htmlFor=\"password\">비밀번호 </label>\r\n          <PasswordBox>\r\n            <FilledInput\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type={ShowPassword ? 'text' : 'password'}\r\n              placeholder=\"비밀번호를 입력하세요\"\r\n              {...register('password', {\r\n                required: true,\r\n                minLength: 8,\r\n                maxLenght: 20,\r\n                validate: {\r\n                  checkLang: value =>\r\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\r\n                      pattern.test(value),\r\n                    ),\r\n                  checkLower: value =>\r\n                    [/[a-z]/].every(pattern => pattern.test(value)),\r\n                  checkUpper: value =>\r\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\r\n                  checkNumber: value =>\r\n                    [/[0-9]/].every(pattern => pattern.test(value)),\r\n                  checkSpec: value =>\r\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\r\n                },\r\n              })}\r\n            />\r\n            <PasswordButton>\r\n              <IconButton\r\n                aria-label=\"toggle_password\"\r\n                onClick={handleVisibility}\r\n              >\r\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </PasswordButton>\r\n          </PasswordBox>\r\n          {errors.password && (\r\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <li>\r\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n              이메일 변경\r\n            </RegistButton>\r\n          </li>\r\n        </InputBox>\r\n\r\n        <Title>비밀번호 변경</Title>\r\n        <InputBox>\r\n          <label htmlFor=\"currentPassword\">현재 비밀번호</label>\r\n          <PasswordBox>\r\n            <FilledInput\r\n              id=\"currentPassword\"\r\n              name=\"currentPassword\"\r\n              type={ShowPassword2 ? 'text' : 'password'}\r\n              placeholder=\"현재 비밀번호를 입력하세요\"\r\n              {...register('currentPassword', {\r\n                required: true,\r\n                minLength: 8,\r\n                maxLength: 20,\r\n                validate: {\r\n                  checkLang: value =>\r\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\r\n                      pattern.test(value),\r\n                    ),\r\n                  checkLower: value =>\r\n                    [/[a-z]/].every(pattern => pattern.test(value)),\r\n                  checkUpper: value =>\r\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\r\n                  checkNumber: value =>\r\n                    [/[0-9]/].every(pattern => pattern.test(value)),\r\n                  checkSpec: value =>\r\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\r\n                },\r\n              })}\r\n            />\r\n            <PasswordButton>\r\n              <IconButton\r\n                aria-label=\"toggle_password\"\r\n                onClick={handleVisibility2}\r\n              >\r\n                {ShowPassword2 ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </PasswordButton>\r\n          </PasswordBox>\r\n          {errors.currentPassword && (\r\n            <ErrorMessage>\r\n              {PasswordError[errors.currentPassword.type]}\r\n            </ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n\r\n        <InputBox>\r\n          <label htmlFor=\"newPassword\">새 비밀번호</label>\r\n          <PasswordBox>\r\n            <FilledInput\r\n              id=\"newPassword\"\r\n              name=\"newPassword\"\r\n              type={ShowPassword ? 'text' : 'password'}\r\n              placeholder=\"새 비밀번호를 입력하세요\"\r\n              {...register('newPassword', {\r\n                required: true,\r\n                minLength: 8,\r\n                maxLength: 20,\r\n                validate: {\r\n                  checkLang: value =>\r\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\r\n                      pattern.test(value),\r\n                    ),\r\n                  checkLower: value =>\r\n                    [/[a-z]/].every(pattern => pattern.test(value)),\r\n                  checkUpper: value =>\r\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\r\n                  checkNumber: value =>\r\n                    [/[0-9]/].every(pattern => pattern.test(value)),\r\n                  checkSpec: value =>\r\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\r\n                },\r\n              })}\r\n            />\r\n            <PasswordButton>\r\n              <IconButton\r\n                aria-label=\"toggle_password\"\r\n                onClick={handleVisibility}\r\n              >\r\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </PasswordButton>\r\n          </PasswordBox>\r\n          {errors.newPassword && (\r\n            <ErrorMessage>\r\n              {PasswordError[errors.newPassword.type]}\r\n            </ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <label htmlFor=\"confirmNewPassword\">새 비밀번호 확인</label>\r\n          <FilledInput\r\n            id=\"confirmNewPassword\"\r\n            name=\"confirmNewPassword\"\r\n            type=\"password\"\r\n            placeholder=\"새 비밀번호를 다시 입력하세요\"\r\n            {...register('passwordConfirm', {\r\n              required: true,\r\n              validate: value => value === newPassword.current,\r\n            })}\r\n          />\r\n          {errors.passwordConfirm && (\r\n            <ErrorMessage>\r\n              {PasswordConfirmError[errors.passwordConfirm.type]}\r\n            </ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <li>\r\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n              비밀번호 변경\r\n            </RegistButton>\r\n          </li>\r\n        </InputBox>\r\n        <Title>회원탈퇴</Title>\r\n        <InputBox>\r\n          <label htmlFor=\"password\">비밀번호</label>\r\n          <PasswordBox>\r\n            <FilledInput\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type={ShowPassword ? 'text' : 'password'}\r\n              placeholder=\"대/소문자,숫자,특수문자 포함 8~20자\"\r\n              {...register('password', {\r\n                required: true,\r\n                minLength: 8,\r\n                maxLength: 20,\r\n                validate: {\r\n                  checkLang: value =>\r\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\r\n                      pattern.test(value),\r\n                    ),\r\n                  checkLower: value =>\r\n                    [/[a-z]/].every(pattern => pattern.test(value)),\r\n                  checkUpper: value =>\r\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\r\n                  checkNumber: value =>\r\n                    [/[0-9]/].every(pattern => pattern.test(value)),\r\n                  checkSpec: value =>\r\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\r\n                },\r\n              })}\r\n            />\r\n            <PasswordButton>\r\n              <IconButton\r\n                aria-label=\"toggle_password\"\r\n                onClick={handleVisibility}\r\n              >\r\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </PasswordButton>\r\n          </PasswordBox>\r\n          {errors.password && (\r\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <label htmlFor=\"confirmPassword\">비밀번호 확인</label>\r\n          <FilledInput\r\n            id=\"confirmPassword\"\r\n            name=\"confirmPassword\"\r\n            type=\"password\"\r\n            placeholder=\"비밀번호를 다시 입력해주세요.\"\r\n            {...register('passwordConfirm', {\r\n              required: true,\r\n              validate: value => value === password.current,\r\n            })}\r\n          />\r\n          {errors.passwordConfirm && (\r\n            <ErrorMessage>\r\n              {PasswordConfirmError[errors.passwordConfirm.type]}\r\n            </ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <li>\r\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n              회원탈퇴\r\n            </RegistButton>\r\n          </li>\r\n        </InputBox>\r\n      </ContentBox>\r\n    </FormBox>\r\n  );\r\n}\r\n\r\nexport default withRouter(Email);\r\n","import { useState } from 'react';\r\nimport FileUpload from 'react-material-file-upload';\r\n\r\nexport default function App() {\r\n  const [files, setFiles] = useState([]);\r\n  return (\r\n    <div className=\"App\">\r\n      <FileUpload value={files} onChange={setFiles} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getName, updateName } from 'modules/actions/user';\r\nimport Profile from './Profile';\r\nimport Uploader from './Uploader';\r\nimport {\r\n  FormBox,\r\n  ProfileBox,\r\n  ContentBox,\r\n  ErrorMessage,\r\n  InputBox,\r\n  FilledInput,\r\n  UploaderBox,\r\n  RegistButton,\r\n  Title,\r\n} from 'styles/form/change-styles';\r\n\r\nfunction Email({ history }) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: 'onTouched',\r\n  });\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n\r\n  const [oldName, getOldName] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(getName(userFrom)).then(response => {\r\n      getOldName(response.payload.name);\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(user => {\r\n    user._id = userFrom;\r\n    dispatch(updateName(user)).then(response => {\r\n      if (!response.payload.changeSuccess) {\r\n        alert(response.payload.message);\r\n      } else {\r\n        if (response.payload.changeSuccess) {\r\n          alert('이름이 변경되었습니다.');\r\n          history.push('/mypage');\r\n        } else {\r\n          alert(response.payload.message);\r\n        }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n      <ProfileBox className=\"left\">\r\n        <Profile name={'개인정보 수정'} go={'/mypage/email'} />\r\n      </ProfileBox>\r\n      <ContentBox className=\"right\">\r\n        <Title>프로필 사진 변경</Title>\r\n        <InputBox>\r\n          <UploaderBox>\r\n            <Uploader />\r\n          </UploaderBox>\r\n        </InputBox>\r\n\r\n        <InputBox>\r\n          <li>\r\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n              프로필 변경\r\n            </RegistButton>\r\n          </li>\r\n        </InputBox>\r\n        <Title>닉네임 변경</Title>\r\n        <InputBox>\r\n          <label htmlFor=\"oldName\">현재 닉네임</label>\r\n          <FilledInput id=\"oldName\" name=\"oldName\" value={oldName} readOnly />\r\n        </InputBox>\r\n        <InputBox>\r\n          <label htmlFor=\"name\">변경할 닉네임</label>\r\n          <FilledInput\r\n            id=\"name\"\r\n            name=\"name\"\r\n            type=\"name\"\r\n            placeholder=\"변경할 닉네임을 입력하세요\"\r\n            {...register('name', {\r\n              required: '닉네임을 입력하세요',\r\n            })}\r\n          />\r\n          {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}\r\n        </InputBox>\r\n        <InputBox>\r\n          <li>\r\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n              닉네임 변경\r\n            </RegistButton>\r\n          </li>\r\n        </InputBox>\r\n      </ContentBox>\r\n    </FormBox>\r\n  );\r\n}\r\n\r\nexport default withRouter(Email);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport AddComment from 'components/BoardQuoteMaster/Section/Comment/AddComment';\r\nimport ReplyInput from 'components/BoardQuoteMaster/Section/Reply/ReplyInput';\r\nimport { getMyReply } from 'modules/actions/user';\r\nimport styled from 'styled-components';\r\nimport Reply from 'assests/Reply.png';\r\n\r\nfunction MyReply() {\r\n  const dispatch = useDispatch();\r\n  const [RepliesFrom, setRepliesFrom] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const showHandler = () => setShow(!show);\r\n  const [commentId, getCommentId] = useState('');\r\n  const onRemove = id => {\r\n    setRepliesFrom(RepliesFrom.filter(RepliesFrom => RepliesFrom._id !== id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userFrom = localStorage.getItem('userId');\r\n    dispatch(getMyReply({ userFrom: userFrom })).then(response => {\r\n      if (response.payload.success) {\r\n        saveOptions(response.payload.replies);\r\n      } else {\r\n        alert('대댓글을 불러오는데 실패했습니다.');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const saveOptions = replies => {\r\n    const repliesList = [];\r\n    replies.forEach(element => {\r\n      repliesList.push(element.commentFrom);\r\n    });\r\n    setRepliesFrom(\r\n      [...new Set(repliesList.map(JSON.stringify))].map(JSON.parse),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {RepliesFrom.length === 0 && (\r\n        <NothingBox>\r\n          <NothingAlert>대댓글 목록이 없습니다.</NothingAlert>\r\n        </NothingBox>\r\n      )}\r\n      {RepliesFrom &&\r\n        RepliesFrom.map((comment, index) => {\r\n          return (\r\n            <CommentUl key={index}>\r\n              <React.Fragment key={index}>\r\n                <AddComment\r\n                  id={comment._id}\r\n                  user={comment.userFrom}\r\n                  time={comment.createdAt}\r\n                  writer={comment.commentWriter}\r\n                  title={comment.commentTitle}\r\n                  content={comment.commentContent}\r\n                  onRemove={onRemove}\r\n                />\r\n                <ReplyImg\r\n                  src={Reply}\r\n                  onClick={() => {\r\n                    showHandler();\r\n                    getCommentId(comment._id);\r\n                  }}\r\n                />\r\n                <li>\r\n                  {show && comment._id === commentId && (\r\n                    <ReplyInput\r\n                      id={commentId}\r\n                      name=\"Reply\"\r\n                      placeholder=\"대댓글을 작성해주세요.\"\r\n                      userFrom={comment.userFrom}\r\n                      writerFrom={comment.commentWriter}\r\n                    />\r\n                  )}\r\n                </li>\r\n              </React.Fragment>\r\n            </CommentUl>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyReply);\r\n\r\nconst NothingBox = styled.div`\r\n  display: flex;\r\n  height: 500px;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst NothingAlert = styled.p`\r\n  font-size: 25px;\r\n  color: #ff0200;\r\n`;\r\n\r\nconst CommentUl = styled.ul`\r\n  position: relative;\r\n`;\r\n\r\nconst ReplyImg = styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 5px;\r\n  cursor: pointer;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getMyComment } from 'modules/actions/user';\r\nimport { updateComment } from 'modules/actions/comment';\r\nimport AddComment from 'components/BoardQuoteMaster/Section/Comment/AddComment';\r\nimport styled from 'styled-components';\r\n\r\nfunction MyEditComment({ history }) {\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [MyComment, setMyComment] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [commentId, getCommentId] = useState('');\r\n  const [inputs, setInput] = useState({\r\n    commentContent: '',\r\n  });\r\n  const { commentContent } = inputs;\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    setInput({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const onRemove = id => {\r\n    setMyComment(MyComment.filter(MyComment => MyComment._id !== id));\r\n    history.push('/mypage');\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getMyComment({ userFrom: userFrom })).then(response => {\r\n      if (response.payload.success) {\r\n        setMyComment(response.payload.comments);\r\n      } else {\r\n        alert('댓글을 불러오는데 실패했습니다.');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    dispatch(\r\n      updateComment(userFrom, commentId, { commentContent: commentContent }),\r\n    ).then(response => {\r\n      if (!response.payload.success) {\r\n        alert('댓글 수정에 실패했습니다.');\r\n      } else {\r\n        if (response.payload.success) {\r\n          alert('댓글이 수정되었습니다.');\r\n          window.location.replace('/mypage/myComment');\r\n        } else {\r\n          alert(response.payload.message);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {show && (\r\n        <EditForm onSubmit={onSubmit}>\r\n          <input\r\n            name=\"commentContent\"\r\n            placeholder=\"댓글을 작성해주세요.\"\r\n            value={commentContent}\r\n            onChange={onChange}\r\n            className=\"commentInput\"\r\n          />\r\n          <CommentButton type=\"submit\" onClick={onSubmit}>\r\n            수정\r\n          </CommentButton>\r\n        </EditForm>\r\n      )}\r\n      {MyComment.length === 0 && (\r\n        <NothingBox>\r\n          <NothingAlert>댓글 목록이 없습니다.</NothingAlert>\r\n        </NothingBox>\r\n      )}\r\n      {MyComment &&\r\n        MyComment.map((comment, index) => {\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <CommentUl>\r\n                <AddComment\r\n                  id={comment._id}\r\n                  user={comment.userFrom}\r\n                  time={comment.createdAt}\r\n                  writer={comment.commentWriter}\r\n                  title={comment.commentTitle}\r\n                  content={comment.commentContent}\r\n                  onRemove={onRemove}\r\n                />\r\n                <EditButton\r\n                  onClick={() => {\r\n                    getCommentId(comment._id);\r\n                    setShow(!show);\r\n                  }}\r\n                >\r\n                  수정\r\n                </EditButton>\r\n              </CommentUl>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyEditComment);\r\n\r\nconst EditButton = styled.button`\r\n  color: #ff0200;\r\n  font-size: 12px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  margin-top: 2.5px;\r\n`;\r\n\r\nconst CommentUl = styled.ul`\r\n  position: relative;\r\n`;\r\n\r\nconst CommentButton = styled.button`\r\n  border-radius: 8px;\r\n  padding-top: 3px;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  margin-left: 10px;\r\n  width: 70px;\r\n  height: 35px;\r\n  text-align: center;\r\n  background-color: #ff0200;\r\n  color: #fff;\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst EditForm = styled.form`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst NothingBox = styled.div`\r\n  display: flex;\r\n  height: 500px;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst NothingAlert = styled.p`\r\n  font-size: 25px;\r\n  color: #ff0200;\r\n`;\r\n","import React from 'react';\r\nimport { Route, withRouter } from 'react-router';\r\nimport PageList from 'components/MyPage/PageList';\r\nimport Email from 'components/MyPage/Section/Email';\r\nimport Password from 'components/MyPage/Section/Password';\r\nimport Withdrawal from 'components/MyPage/Section/Withdrawal';\r\nimport MyBoardList from 'components/MyPage/Section/MyBoardList';\r\nimport MyComment from 'components/MyPage/Section/MyComment';\r\nimport MyReply from 'components/MyPage/Section/MyReply';\r\nimport MyFavorite from 'components/MyPage/Section/MyFavorite';\r\nimport MyEditComment from 'components/MyPage/Section/MyEditComment';\r\n\r\nfunction MyPage({ match }) {\r\n  return (\r\n    <>\r\n      <Route exact path={match.path} component={PageList} />\r\n      <Route path={`${match.path}/email`} component={Email} />\r\n      <Route path={`${match.path}/password`} component={Password} />\r\n      <Route path={`${match.path}/boardList`} component={MyBoardList} />\r\n      <Route path={`${match.path}/myComment`} component={MyEditComment} />\r\n      <Route path={`${match.path}/comment`} component={MyComment} />\r\n      <Route path={`${match.path}/reply`} component={MyReply} />\r\n      <Route path={`${match.path}/favorite`} component={MyFavorite} />\r\n      <Route path={`${match.path}/withdrawal`} component={Withdrawal} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MyPage);\r\n"],"sourceRoot":""}