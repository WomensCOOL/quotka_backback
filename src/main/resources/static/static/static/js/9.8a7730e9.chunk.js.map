{"version":3,"sources":["library/options/errors.js","components/MyPage/Section/MyBoardList.js","components/common/Pagination.js","components/MyPage/Section/MyComment.js","components/BoardQuoteMaster/Section/Like/MyLikeBoard.js","components/MyPage/Section/MyFavorite.js","styles/mypage/styles.js","components/MyPage/Section/TabMenu.js","components/MyPage/PageList.js","components/MyPage/Section/Profile.js","styles/form/change-styles.js","components/MyPage/Section/Email.js","components/MyPage/Section/Uploader.js","components/MyPage/Section/Password.js","components/MyPage/Section/MyReply.js","components/MyPage/Section/MyEditComment.js","pages/MyPage.js"],"names":["EmailError","required","checkPattern","PasswordError","minLength","maxLength","checkLower","checkUpper","checkSpec","checkLang","PasswordConfirmError","validate","NameError","withRouter","history","dispatch","useDispatch","userFrom","localStorage","getItem","useState","setMyBoard","boardTitle","boardContent","inputs","useEffect","getMyBoard","then","response","payload","success","boards","alert","BoardUI","className","styled","tbody","Paging","page","count","setPage","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","prevPageText","nextPageText","onChange","CommentsFrom","setCommentsFrom","onRemove","id","filter","_id","getMyComment","saveOptions","comments","commentsList","forEach","element","push","boardFrom","Set","map","JSON","stringify","parse","length","NothingBox","NothingAlert","board","index","Fragment","AddBoard","user","time","createdAt","writer","boardWriter","title","content","div","p","props","currentUser","window","AddBoardBox","BoardHeader","style","display","NameBox","Writer","GithubImg","src","Github","alt","onClick","open","github","TimeBox","DeleteBoardBox","DeleteBoard","to","Title","Content","textAlign","LikeButton","boardId","CommentButton","img","span","myFavorites","setMyFavorites","likeList","likes","catch","e","getMyFavorite","href","MyPageBox","MyPageTitle","li","MyPagefollow","MyInform","MyChange","MenuList","Orgchart","activeIndex","setActiveIndex","tabClickHandler","tabContArr","tabTitle","tabCont","section","Profile","ProfileLeft","Box","Img","go","name","h1","FormBox","form","UploaderBox","ProfileBox","ContentBox","InputBox","FilledInput","input","ErrorMessage","PasswordBox","PasswordButton","RegistButton","button","useForm","mode","register","handleSubmit","watch","errors","formState","ShowPassword","setShowPassword","ShowPassword2","setShowPassword2","password","useRef","current","newPassword","oldEmail","getOldEmail","handleVisibility","getEmail","email","onSubmit","useCallback","updatePassword","changeSuccess","message","confirm","withdrawalUser","updateEmail","htmlFor","value","readOnly","type","placeholder","pattern","maxLenght","every","test","checkNumber","IconButton","currentPassword","passwordConfirm","App","files","setFiles","oldName","getOldName","getName","updateName","RepliesFrom","setRepliesFrom","show","setShow","commentId","getCommentId","getMyReply","replies","repliesList","commentFrom","comment","CommentUl","AddComment","commentWriter","commentTitle","commentContent","ReplyImg","Reply","ReplyInput","writerFrom","ul","MyComment","setMyComment","setInput","preventDefault","updateComment","location","replace","EditForm","target","EditButton","match","exact","path","component","PageList","Email","Password","MyBoardList","MyEditComment","MyReply","MyFavorite","Withdrawal"],"mappings":"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","file":"static/js/9.8a7730e9.chunk.js","sourcesContent":["// 이메일\nexport const EmailError = {\n  required: '이메일을 입력해주세요.',\n  checkPattern: '이메일 형식이 올바르지 않습니다.',\n};\n\n// 비밀번호\nexport const PasswordError = {\n  required: '비밀번호를 입력해주세요.',\n  minLength: '비밀번호를 8글자 이상 입력해주세요.',\n  maxLength: '비밀번호를 20글자 이내로 입력해주세요.',\n  checkLower: '비밀번호에 소문자를 포함해주세요.',\n  checkUpper: '비밀번호에 대문자를 포함해주세요.',\n  checkSpec: '비밀번호에 특수문자를 포함해주세요.',\n  checkLang: '비밀번호에 한글은 포함할 수 없습니다.',\n};\n\n// 비밀번호 확인\nexport const PasswordConfirmError = {\n  required: '비밀번호를 다시 입력해주세요.',\n  validate: '비밀번호가 일치하지 않습니다.',\n};\n\n// 이름\nexport const NameError = {\n  required: '닉네임을 입력해주세요.',\n  minLength: '닉네임을 2글자 이상 입력해주세요.',\n  maxLength: '닉네임을 10글자 이내로 작성해주세요.',\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getMyBoard } from 'modules/actions/user';\nimport { updateBoard } from 'modules/actions/board';\nimport AddBoard from 'components/BoardQuoteMaster/Section/Board/AddBoard';\nimport styled from 'styled-components';\n\nfunction MyBoardList({ history }) {\n  const dispatch = useDispatch();\n  const userFrom = localStorage.getItem('userId');\n  const [MyBoard, setMyBoard] = useState([]);\n  const [show, setShow] = useState(false);\n  const [boardId, getBoardId] = useState('');\n  const [inputs, setInput] = useState({\n    boardTitle: '',\n    boardContent: '',\n  });\n  const { boardTitle, boardContent } = inputs;\n  const onChange = e => {\n    const { value, name } = e.target;\n    setInput({\n      ...inputs,\n      [name]: value,\n    });\n  };\n\n  const onRemove = id => {\n    setMyBoard(MyBoard.filter(MyBoard => MyBoard._id !== id));\n    history.push('/mypage/boardlist');\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (!boardTitle) {\n      alert('제목을 작성해주세요.');\n      return;\n    } else if (!boardContent) {\n      alert('내용을 작성해주세요.');\n      return;\n    } else if (boardContent.length > 300) {\n      alert('내용을 300자 이내로 작성해주세요.');\n      return;\n    }\n    dispatch(\n      updateBoard(userFrom, boardId, {\n        boardTitle: boardTitle,\n        boardContent: boardContent,\n      }),\n    ).then(response => {\n      if (!response.payload.success) {\n        alert('게시글 수정에 실패했습니다.');\n      } else {\n        if (response.payload.success) {\n          alert('게시글이 수정되었습니다.');\n          window.location.replace('/mypage/boardList');\n        } else {\n          alert(response.payload.message);\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(getMyBoard({ userFrom: userFrom })).then(response => {\n      if (response.payload.success) {\n        setMyBoard(response.payload.boards);\n      } else {\n        alert('게시글 정보를 가져오는데 실패했습니다.');\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      <BoardUI>\n        <table>\n          <thead>\n            <tr>\n              <th>번호</th>\n              <th className=\"date\">일자</th>\n              <th>글 제목</th>\n              <th>본문 내용</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td className=\"num\">1</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">2</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">3</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">4</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">5</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n          </tbody>\n        </table>\n      </BoardUI>\n    </>\n  );\n}\n\nexport default withRouter(MyBoardList);\n\nconst BoardUI = styled.tbody`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-collapse: separate;\n  border-spacing: 0 10px;\n\n  .num {\n    width: 5%;\n    text-align: center;\n  }\n  .date {\n    width: 7%;\n  }\n  .title {\n    width: 25%;\n    text-align: center;\n  }\n  .content {\n    width: 63%;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 14px;\n    border-top: 1px solid #444444;\n    margin-top: 7px;\n  }\n\n  td {\n    text-aligh: left;\n    padding: 10px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n  th {\n    padding: 15px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n\n  thead {\n    font-family: 'SCDream-bold';\n    font-weight: 100;\n  }\n`;\n","import React from 'react';\nimport './Paging.css';\nimport Pagination from 'react-js-pagination';\n\nconst list = [\n  {\n    id: 'a',\n    firstname: 'Robin',\n    lastname: 'Wieruch',\n    year: 1988,\n  },\n];\n\nconst ComplexList = () => (\n  <ul>\n    {list.map(item => (\n      <li key={item.id}>\n        <div>{item.id}</div>\n        <div>{item.firstname}</div>\n        <div>{item.lastname}</div>\n        <div>{item.year}</div>\n      </li>\n    ))}\n  </ul>\n);\n\nconst ManageEvents = ({ match, history }) => {\n  const dispatch = useDispatch();\n\n  const { count, page, items } = useSelector(\n    ({ event }) => ({\n      count: event.count,\n      page: event.page,\n      itemts: event.items,\n    }),\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    dispatch(eventActions.getEvents());\n  }, []);\n\n  const setPage = useCallback(\n    page => {\n      dispatch(eventActions.getEvents(page));\n    },\n    [dispatch],\n  );\n\n  return (\n    <div>\n      <EventList events={items} match={match} />\n      <Paging page={page} count={count} setPage={setPage} />\n    </div>\n  );\n};\n\nconst Paging = ({ page, count, setPage }) => {\n  return (\n    <Pagination\n      activePage={page}\n      itemsCountPerPage={5}\n      totalItemsCount={count}\n      pageRangeDisplayed={5}\n      prevPageText={'‹'}\n      nextPageText={'›'}\n      onChange={setPage}\n    />\n  );\n};\n\nexport default Paging;\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getMyComment } from 'modules/actions/user';\nimport AddBoard from 'components/BoardQuoteMaster/Section/Board/AddBoard';\nimport styled from 'styled-components';\nimport Paging from 'components/common/Pagination';\n\nfunction MyComment() {\n  const dispatch = useDispatch();\n  const [CommentsFrom, setCommentsFrom] = useState([]);\n\n  const onRemove = id => {\n    setCommentsFrom(\n      CommentsFrom.filter(CommentsFrom => CommentsFrom._id !== id),\n    );\n  };\n\n  useEffect(() => {\n    const userFrom = localStorage.getItem('userId');\n    dispatch(getMyComment({ userFrom: userFrom })).then(response => {\n      if (response.payload.success) {\n        saveOptions(response.payload.comments);\n      } else {\n        alert('댓글을 불러오는데 실패했습니다.');\n      }\n    });\n  }, []);\n\n  const saveOptions = comments => {\n    const commentsList = [];\n\n    comments.forEach(element => {\n      commentsList.push(element.boardFrom);\n    });\n    setCommentsFrom(\n      [...new Set(commentsList.map(JSON.stringify))].map(JSON.parse),\n    );\n  };\n\n  return (\n    <>\n      <BoardUI>\n        <table>\n          <thead>\n            <tr>\n              <th>번호</th>\n              <th className=\"date\">일자</th>\n              <th>글 제목</th>\n              <th>본문 내용</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td className=\"num\">1</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">2</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">3</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">4</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">5</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n          </tbody>\n        </table>\n      </BoardUI>\n      <Paging />\n      {CommentsFrom.length === 0 && (\n        <NothingBox>\n          <NothingAlert>댓글 목록이 없습니다.</NothingAlert>\n        </NothingBox>\n      )}\n      {CommentsFrom &&\n        CommentsFrom.map((board, index) => {\n          return (\n            <React.Fragment key={index}>\n              <AddBoard\n                id={board._id}\n                user={board.userFrom}\n                time={board.createdAt}\n                writer={board.boardWriter}\n                title={board.boardTitle}\n                content={board.boardContent}\n                onRemove={onRemove}\n              />\n            </React.Fragment>\n          );\n        })}\n    </>\n  );\n}\n\nexport default withRouter(MyComment);\n\nconst NothingBox = styled.div`\n  display: flex;\n  height: 500px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NothingAlert = styled.p`\n  font-size: 25px;\n  color: #ff0200;\n`;\n\nconst BoardUI = styled.tbody`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-collapse: separate;\n  border-spacing: 0 10px;\n\n  .num {\n    width: 5%;\n    text-align: center;\n  }\n  .date {\n    width: 7%;\n  }\n  .title {\n    width: 25%;\n    text-align: center;\n  }\n  .content {\n    width: 63%;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 14px;\n    border-top: 1px solid #444444;\n    margin-top: 7px;\n  }\n\n  td {\n    text-aligh: left;\n    padding: 10px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n  th {\n    padding: 15px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n\n  thead {\n    font-family: 'SCDream-bold';\n    font-weight: 100;\n  }\n`;\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport UpdateTime from 'library/utils/updateTime';\nimport DeleteBoard from 'components/BoardQuoteMaster/Section/Board/DeleteBoard';\nimport LikeButton from './LikeButton';\nimport CommentButton from '../Comment/CommentButton';\nimport Github from 'assests/Github.png';\nimport styled from 'styled-components';\n\nfunction MyLikeBoard(props) {\n  const currentUser = window.localStorage.getItem('userId');\n\n  return (\n    <>\n      <AddBoardBox key={props.id}>\n        <div>\n          <BoardHeader style={{ display: 'flex' }}>\n            <NameBox>\n              <Writer>{props.writer}</Writer>\n              <GithubImg\n                src={Github}\n                alt=\"GitHub\"\n                onClick={() => window.open(`${props.user.github}`, '_blank')}\n              />\n            </NameBox>\n            <TimeBox>\n              <UpdateTime time={props.time} />\n            </TimeBox>\n            <DeleteBoardBox>\n              {props.user === currentUser ? (\n                <>\n                  <DeleteBoard\n                    board={props.id}\n                    user={props.user}\n                    history={props.history}\n                    onRemove={props.onRemove}\n                  />\n                </>\n              ) : null}\n            </DeleteBoardBox>\n          </BoardHeader>\n        </div>\n        <Link to={`/board/${props.id}`}>\n          <Title>{props.title}</Title>\n          <Content>{props.content}</Content>\n        </Link>\n        <div style={{ textAlign: 'right' }}>\n          <LikeButton\n            boardId={props.id}\n            boardWriter={props.writer}\n            boardTitle={props.title}\n            boardContent={props.content}\n          />\n          <Link to={`/board/${props.id}`}>\n            <CommentButton boardId={props.id} />\n          </Link>\n        </div>\n      </AddBoardBox>\n    </>\n  );\n}\n\nexport default withRouter(MyLikeBoard);\n\nconst GithubImg = styled.img`\n  width: 28px;\n  height: 28px;\n  cursor: pointer;\n`;\n\nconst AddBoardBox = styled.div`\n  border-radius: 10px;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n  margin-bottom: 10px;\n`;\n\nconst Writer = styled.span`\n  width: 60px;\n  height: 25px;\n  font-size: 14px;\n  padding-top: 3px;\n  font-weight: 500;\n  color: #fff;\n  background-color: #1a83ff;\n  border-radius: 5px;\n  margin: 0 auto;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst TimeBox = styled.div`\n  display: flex;\n  width: 100%;\n  height: 30px;\n  font-size: 14px;\n  padding-top: 3px;\n  justify-content: flex-end;\n  color: #aaa;\n  font-weight: 600;\n`;\n\nconst BoardHeader = styled.span`\n  width: 97%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NameBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst Title = styled.div`\n  font-size: 20px;\n  padding-left: 10px;\n`;\nconst Content = styled.div`\n  font-size: 13px;\n  padding-left: 10px;\n`;\n\nconst DeleteBoardBox = styled.div``;\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { likeList } from 'modules/actions/like';\nimport MyLikeBoard from 'components/BoardQuoteMaster/Section/Like/MyLikeBoard';\nimport styled from 'styled-components';\n\nfunction myFavorite() {\n  const dispatch = useDispatch();\n  const [myFavorites, setMyFavorites] = useState([]);\n\n  const getMyFavorite = () => {\n    const userFrom = localStorage.getItem('userId');\n    dispatch(likeList({ userFrom: userFrom }))\n      .then(response => {\n        setMyFavorites(response.payload.likes);\n      })\n      .catch(e => alert('좋아요한 게시글을 불러오는데 실패했습니다,'));\n  };\n\n  useEffect(() => {\n    getMyFavorite();\n  }, []);\n\n  return (\n    <>\n      <BoardUI>\n        <table>\n          <thead>\n            <tr>\n              <th>번호</th>\n              <th className=\"date\">일자</th>\n              <th className=\"user\">글쓴이</th>\n              <th>글 제목</th>\n              <th>본문 내용</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td className=\"num\">1</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"user\">글쓴이</td>\n\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">2</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"user\">글쓴이</td>\n\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">3</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"user\">글쓴이</td>\n\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">4</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"user\">글쓴이</td>\n\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n            <tr>\n              <td className=\"num\">5</td>\n              <td className=\"date\">2022.07.24</td>\n              <td className=\"user\">글쓴이올시다</td>\n              <td className=\"title\">뭐라뭐라 제목이올시다</td>\n              <td className=\"content\">뭐라뭐라 내용이 올시다.</td>\n            </tr>\n          </tbody>\n        </table>\n      </BoardUI>\n      {myFavorites.length === 0 && (\n        <NothingBox>\n          <NothingAlert>좋아요한 게시글이 없습니다.</NothingAlert>\n        </NothingBox>\n      )}\n      {myFavorites &&\n        myFavorites.map((likes, index) => {\n          return (\n            <React.Fragment key={index}>\n              <MyLikeBoard\n                href=\"{`../board/${likes.boardFrom}`}\"\n                id={likes.boardFrom}\n                time={likes.createdAt}\n                writer={likes.boardWriter}\n                title={likes.boardTitle}\n                content={likes.boardContent}\n              />\n            </React.Fragment>\n          );\n        })}\n    </>\n  );\n}\n\nexport default withRouter(myFavorite);\n\nconst NothingBox = styled.div`\n  display: flex;\n  height: 500px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NothingAlert = styled.p`\n  font-size: 25px;\n  color: #ff0200;\n`;\n\nconst BoardUI = styled.tbody`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-collapse: separate;\n  border-spacing: 0 10px;\n\n  .num {\n    width: 5%;\n    text-align: center;\n  }\n  .date {\n    width: 5%;\n  }\n  .user {\n    text-align: center;\n\n    width: 10%;\n  }\n  .title {\n    width: 25%;\n    text-align: center;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 14px;\n    border-top: 1px solid #444444;\n    margin-top: 7px;\n  }\n\n  td {\n    text-aligh: left;\n    padding: 10px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n  th {\n    padding: 15px;\n    border-bottom: 1px solid #444444;\n    margin-left: 10px;\n  }\n\n  thead {\n    font-family: 'SCDream-bold';\n    font-weight: 100;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const MyPageBox = styled.div`\n  font-family: 'SCDream';\n  font-weight: 700;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .profile {\n    width: 55px;\n    height: 55px;\n    margin-left: 46%;\n  }\n\n  .id {\n    margin: 0 auto;\n    font-weight: 800;\n    margin-top: 5px;\n  }\n`;\n\nexport const MyPageTitle = styled.li`\n  display: flex;\n  justify-content: center;\n  font-size: 25px;\n  padding-top: 3px;\n  font-weight: bold;\n  color: Green;\n  border-radius: 10px;\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nexport const MyPagefollow = styled.li`\n  display: flex;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: 600;\n  color: black;\n  border-radius: 10px;\n  text-align: center;\n  margin-bottom: 10px;\n\n  div {\n    margin-right: 5px;\n    margin-left: 8px;\n  }\n`;\n\nexport const MyInform = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 12px;\n  padding-top: 3px;\n  font-weight: 600;\n  color: black;\n  border-radius: 10px;\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nexport const MyChange = styled.div`\n  margin-bottom: 10px;\n\n  ul {\n    list-style: none;\n    justify-content: center;\n    display: flex;\n    margin-top: 10px;\n  }\n  li {\n    box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\n    border-radius: 10px;\n    background-color: #c5ad81;\n    color: #fff;\n    padding: 7px;\n    font-size: 12px;\n    float: left;\n    margin-right: 10px;\n  }\n`;\n\nexport const MyPageList = styled.div`\n  box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\n  padding: 20px;\n  border-radius: 10px;\n  margin-bottom: 30px;\n  background-color: #eee;\n`;\n\nexport const MenuList = styled.div`\n  .menu-list {\n    display: flex;\n    padding: 7px;\n    font-size: 14px;\n  }\n\n  .submenu {\n    margin-right: 25px;\n    cursor: pointer;\n    font-weight: 600;\n  }\n\n  .submenu:hover {\n    font-family: 'SCDream-bold';\n    font-weight: 100;\n  }\n\n  .focused {\n    font-family: 'SCDream-bold';\n    font-weight: 100;\n  }\n`;\n","import React, { useState } from 'react';\nimport MyBoardList from './MyBoardList';\nimport MyComment from './MyComment';\nimport Favorite from './MyFavorite';\nimport { MenuList } from 'styles/mypage/styles';\n\nexport default function Orgchart() {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const tabClickHandler = index => {\n    setActiveIndex(index);\n  };\n\n  const tabContArr = [\n    {\n      tabTitle: (\n        <li\n          className={activeIndex === 0 ? 'submenu focused' : 'submenu'}\n          onClick={() => tabClickHandler(0)}\n        >\n          저장한 게시글\n        </li>\n      ),\n      tabCont: (\n        <div>\n          <Favorite />\n        </div>\n      ),\n    },\n    {\n      tabTitle: (\n        <li\n          className={activeIndex === 1 ? 'submenu focused' : 'submenu'}\n          onClick={() => tabClickHandler(1)}\n        >\n          내가 쓴 게시글\n        </li>\n      ),\n      tabCont: (\n        <div>\n          <MyBoardList />\n        </div>\n      ),\n    },\n    {\n      tabTitle: (\n        <li\n          className={activeIndex === 2 ? 'submenu focused' : 'submenu'}\n          onClick={() => tabClickHandler(2)}\n        >\n          내가 쓴 댓글\n        </li>\n      ),\n      tabCont: (\n        <div>\n          <MyComment />\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <hr className=\"line\"></hr>\n      <MenuList>\n        <ul className=\"menu-box\">\n          <div className=\"element\">\n            <li className=\"menu-list\">\n              {tabContArr.map((section, index) => {\n                return section.tabTitle;\n              })}\n            </li>\n          </div>\n        </ul>\n      </MenuList>\n\n      <div>{tabContArr[activeIndex].tabCont}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport Profile from 'assests/Profile.png';\nimport Tab from './Section/TabMenu';\nimport {\n  MyPageBox,\n  MyPageTitle,\n  MyPageList,\n  MyPagefollow,\n  MyInform,\n  MyChange,\n} from 'styles/mypage/styles';\n\nfunction PageList() {\n  return (\n    <>\n      <MyPageBox>\n        <MyPageTitle>MY PAGE</MyPageTitle>\n        <img src={Profile} className=\"profile\" />\n\n        <div className=\"id\">쿼억하</div>\n        <MyChange>\n          <ul>\n            <li>\n              <Link to=\"/mypage/email\">개인정보 수정</Link>\n            </li>\n            <li>\n              <Link to=\"/mypage/password\">프로필 수정</Link>\n            </li>\n          </ul>\n        </MyChange>\n        <MyPagefollow>\n          <div>Follower</div>0<div>Following</div>0\n        </MyPagefollow>\n        <MyInform>안녕하세요 쿼억하 입니다. 행복하세요 ^^</MyInform>\n        <Tab />\n      </MyPageBox>\n    </>\n  );\n}\n\nexport default withRouter(PageList);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { withRouter, Link } from 'react-router-dom';\nimport Profile from 'assests/Profile.png';\n\nconst ProfileLeft = props => {\n  return (\n    <>\n      <Box>\n        <Title>PROFILE</Title>\n        <Img>\n          <div>\n            <img src={Profile} className=\"imgFile\" />\n          </div>\n        </Img>\n        <div className=\"name\"> 쿼억카</div>\n        <div className=\"right\">\n          <Link to={props.go}>{props.name}</Link>\n        </div>\n        <div className=\"follow\">Follower0Following0</div>\n        <div className=\"inform\">안녕하세요 쿼카에오 만나서 반가워오</div>\n      </Box>\n    </>\n  );\n};\n\nexport default ProfileLeft;\n\nconst Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  margin-top: 10px;\n  .name {\n    font-weight: 800;\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n  .right {\n    box-shadow: 0 0 0.1px 0 rgba(0, 0, 0, 0.5);\n    border-radius: 5px;\n    background-color: #c5ad81;\n    color: #fff;\n    padding: 9px;\n    font-size: 12px;\n    float: left;\n    font-weight: 900;\n    margin-bottom: 10px;\n  }\n  .follow {\n    font-size: 14px;\n    margin-bottom: 10px;\n    font-weight: 700;\n  }\n  .inform {\n    font-size: 12px;\n    margin-bottom: 10px;\n    font-weight: 600;\n  }\n`;\n\nconst Img = styled.div`\n  .imgFile {\n    width: 100px;\n  }\n  margin-top: 15px;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\n  font-family: SCDream-thick;\n  font-size: 30px;\n  font-weight: 900;\n  letter-spacing: 1.2px;\n`;\n","import styled from 'styled-components';\n\nexport const FormBox = styled.form`\n  display: float;\n\n  .google-img {\n    width: 30px;\n    margin: 0 auto;\n  }\n`;\nexport const UploaderBox = styled.div`\n  width: 375px;\n`;\nexport const ProfileBox = styled.form`\n  width: 60%;\n  padding: 5%;\n  margin-left: -100px;\n`;\nexport const ContentBox = styled.form`\n  width: 70%;\n  margin-right: -100px;\n`;\n\nexport const Title = styled.form`\n  font-famliy: SCDream-thick;\n  font-size: 21px;\n  font-weight: 900;\n  display: flex;\n  justify-content: left;\n  margin-left: 10px;\n  margin-bottom: 12px;\n  margin-top: 10px;\n  letter-spacing: 1.2px;\n`;\n\nexport const FormSmallTitle = styled.h1`\n  display: flex;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 16px;\n  margin-bottom: 13px;\n`;\n\nexport const InputBox = styled.div`\n  margin-bottom: 3px;\n  width: 100%;\n  position: relative;\n  display: flex;\n  margin-left: 20px;\n  flex-direction: column;\n  align-items: start;\n  & label {\n    display: flex;\n    align-items: start;\n    font-size: 14px;\n    font-weight: 700;\n    margin-right: 220px;\n  }\n  &: focus-within {\n    color: #4957a5;\n  }\n`;\n\n/**아이디 비밀번호 치는 디자인width280px이었음. */\nexport const FilledInput = styled.input`\n  position: relative;\n  width: 380px;\n  height: 48px;\n  padding: 0 20px;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  background-color: #eee;\n  font-weight: 500;\n`;\nexport const GoogleImg = styled.img`\n  width: 10px;\n`;\nexport const ErrorMessage = styled.p`\n  color: #de506b;\n  font-size: 11px;\n  padding: 4px 4px;\n  font-weight: 700;\n`;\n\nexport const PasswordBox = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nexport const PasswordButton = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 300px;\n`;\n\nexport const LoginButton = styled.button`\n  margin: 0 auto;\n  width: 280px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #c5ad81;\n  color: #fff;\n  font-weight: 700;\n\n  &:active {\n    opacity: 0.7;\n  }\n`;\n\nexport const TextBox = styled.div`\n  width: 100%;\n  margin-top: 20px;\n  font-size: 14px;\n  text-align: center;\n  padding-right: 17px;\n  & span {\n    font-size: 14px;\n    font-weight: 500;\n    color: #aaa;\n  }\n  & a span {\n    color: #c5ad81;\n    font-weight: 600;\n  }\n`;\n\nexport const RadioBox = styled.div`\n  margin-top: 10px;\n  width: 100%;\n  position: relative;\n  display: flex;\n  margin-left: 110px;\n  flex-direction: row;\n  align-items: start;\n  font-size: 14px;\n  & label {\n    display: flex;\n    align-items: start;\n    font-size: 14px;\n    font-weight: 700;\n    margin-right: 140px;\n  }\n  &: focus-within {\n    color: #4957a5;\n  }\n`;\n\nexport const RegistButton = styled.button`\n  margin: 0 auto;\n  width: 380px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #c5ad81;\n  color: #fff;\n  font-weight: 700;\n  margin-top: 10px;\n  margin-bottom: 40px;\n  &:active {\n    opacity: 0.7;\n  }\n`;\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { updatePassword } from 'modules/actions/user';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { withdrawalUser } from 'modules/actions/user';\nimport { getEmail, updateEmail } from 'modules/actions/user';\nimport { PasswordError, PasswordConfirmError } from 'library/options/errors';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport Profile from './Profile';\nimport {\n  FormBox,\n  ProfileBox,\n  ContentBox,\n  FormTitle,\n  ErrorMessage,\n  InputBox,\n  FilledInput,\n  PasswordBox,\n  PasswordButton,\n  RegistButton,\n  Title,\n} from 'styles/form/change-styles';\n\nfunction Email({ history }) {\n  const {\n    register,\n    handleSubmit,\n    watch,\n\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n  });\n  const dispatch = useDispatch();\n  const userFrom = localStorage.getItem('userId');\n  const [ShowPassword, setShowPassword] = useState(false);\n  const [ShowPassword2, setShowPassword2] = useState(false);\n  const password = useRef();\n  password.current = watch('password');\n\n  const newPassword = useRef();\n  newPassword.current = watch('newPassword');\n  const [oldEmail, getOldEmail] = useState('');\n  const handleVisibility = () => {\n    setShowPassword(!ShowPassword);\n  };\n\n  const handleVisibility2 = () => {\n    setShowPassword2(!ShowPassword2);\n  };\n\n  useEffect(() => {\n    dispatch(getEmail(userFrom)).then(response => {\n      getOldEmail(response.payload.email);\n    });\n  }, []);\n\n  const onSubmit = useCallback(user => {\n    user._id = localStorage.getItem('userId');\n    dispatch(updatePassword(user)).then(response => {\n      if (!response.payload.changeSuccess) {\n        alert(response.payload.message);\n      } else {\n        if (response.payload.changeSuccess) {\n          alert('비밀번호가 변경되었습니다.');\n          history.push('/mypage');\n        } else {\n          alert('비밀번호 변경에 실패했습니다.');\n        }\n      }\n    });\n\n    user._id = localStorage.getItem('userId');\n    let confirmWithdrawal = window.confirm(\n      '탈퇴하시겠습니까?                                                                              ※ 개인정보, 모든 게시물 등의 데이터가 삭제되며, 복구할 수 없습니다. ※',\n    );\n    confirmWithdrawal &&\n      dispatch(withdrawalUser(user)).then(response => {\n        if (!response.payload.changeSuccess) {\n          alert(response.payload.message);\n        } else {\n          if (response.payload.changeSuccess) {\n            alert('회원탈퇴가 완료되었습니다.');\n            history.push('/');\n          } else {\n            alert('회원탈퇴에 실패했습니다.');\n          }\n        }\n      });\n    user._id = userFrom;\n    dispatch(updateEmail(user)).then(response => {\n      if (!response.payload.changeSuccess) {\n        alert(response.payload.message);\n      } else {\n        if (response.payload.changeSuccess) {\n          alert('이메일이 변경되었습니다.');\n          history.push('/mypage');\n        } else {\n          alert(response.payload.message);\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\n      <ProfileBox className=\"left\">\n        <Profile name={'프로필 수정'} go={'/mypage/password'} />\n      </ProfileBox>\n      <ContentBox className=\"right\">\n        <Title>이메일 변경</Title>\n\n        <InputBox>\n          <label htmlFor=\"oldEmail\">현재 이메일</label>\n          <FilledInput\n            id=\"oldEmail\"\n            name=\"oldEmail\"\n            value={oldEmail}\n            readOnly\n          />\n        </InputBox>\n        <InputBox>\n          <label htmlFor=\"email\">변경할 이메일</label>\n          <FilledInput\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"변경할 이메일을 입력하세요\"\n            {...register('email', {\n              required: '이메일을 입력하세요',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                message: '이메일 형식이 올바르지 않습니다',\n              },\n            })}\n          />\n          {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}\n        </InputBox>\n        <InputBox>\n          <label htmlFor=\"password\">비밀번호 </label>\n          <PasswordBox>\n            <FilledInput\n              id=\"password\"\n              name=\"password\"\n              type={ShowPassword ? 'text' : 'password'}\n              placeholder=\"비밀번호를 입력하세요\"\n              {...register('password', {\n                required: true,\n                minLength: 8,\n                maxLenght: 20,\n                validate: {\n                  checkLang: value =>\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\n                      pattern.test(value),\n                    ),\n                  checkLower: value =>\n                    [/[a-z]/].every(pattern => pattern.test(value)),\n                  checkUpper: value =>\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\n                  checkNumber: value =>\n                    [/[0-9]/].every(pattern => pattern.test(value)),\n                  checkSpec: value =>\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\n                },\n              })}\n            />\n            <PasswordButton>\n              <IconButton\n                aria-label=\"toggle_password\"\n                onClick={handleVisibility}\n              >\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </PasswordButton>\n          </PasswordBox>\n          {errors.password && (\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <li>\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              이메일 변경\n            </RegistButton>\n          </li>\n        </InputBox>\n\n        <Title>비밀번호 변경</Title>\n        <InputBox>\n          <label htmlFor=\"currentPassword\">현재 비밀번호</label>\n          <PasswordBox>\n            <FilledInput\n              id=\"currentPassword\"\n              name=\"currentPassword\"\n              type={ShowPassword2 ? 'text' : 'password'}\n              placeholder=\"현재 비밀번호를 입력하세요\"\n              {...register('currentPassword', {\n                required: true,\n                minLength: 8,\n                maxLength: 20,\n                validate: {\n                  checkLang: value =>\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\n                      pattern.test(value),\n                    ),\n                  checkLower: value =>\n                    [/[a-z]/].every(pattern => pattern.test(value)),\n                  checkUpper: value =>\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\n                  checkNumber: value =>\n                    [/[0-9]/].every(pattern => pattern.test(value)),\n                  checkSpec: value =>\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\n                },\n              })}\n            />\n            <PasswordButton>\n              <IconButton\n                aria-label=\"toggle_password\"\n                onClick={handleVisibility2}\n              >\n                {ShowPassword2 ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </PasswordButton>\n          </PasswordBox>\n          {errors.currentPassword && (\n            <ErrorMessage>\n              {PasswordError[errors.currentPassword.type]}\n            </ErrorMessage>\n          )}\n        </InputBox>\n\n        <InputBox>\n          <label htmlFor=\"newPassword\">새 비밀번호</label>\n          <PasswordBox>\n            <FilledInput\n              id=\"newPassword\"\n              name=\"newPassword\"\n              type={ShowPassword ? 'text' : 'password'}\n              placeholder=\"새 비밀번호를 입력하세요\"\n              {...register('newPassword', {\n                required: true,\n                minLength: 8,\n                maxLength: 20,\n                validate: {\n                  checkLang: value =>\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\n                      pattern.test(value),\n                    ),\n                  checkLower: value =>\n                    [/[a-z]/].every(pattern => pattern.test(value)),\n                  checkUpper: value =>\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\n                  checkNumber: value =>\n                    [/[0-9]/].every(pattern => pattern.test(value)),\n                  checkSpec: value =>\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\n                },\n              })}\n            />\n            <PasswordButton>\n              <IconButton\n                aria-label=\"toggle_password\"\n                onClick={handleVisibility}\n              >\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </PasswordButton>\n          </PasswordBox>\n          {errors.newPassword && (\n            <ErrorMessage>\n              {PasswordError[errors.newPassword.type]}\n            </ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <label htmlFor=\"confirmNewPassword\">새 비밀번호 확인</label>\n          <FilledInput\n            id=\"confirmNewPassword\"\n            name=\"confirmNewPassword\"\n            type=\"password\"\n            placeholder=\"새 비밀번호를 다시 입력하세요\"\n            {...register('passwordConfirm', {\n              required: true,\n              validate: value => value === newPassword.current,\n            })}\n          />\n          {errors.passwordConfirm && (\n            <ErrorMessage>\n              {PasswordConfirmError[errors.passwordConfirm.type]}\n            </ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <li>\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              비밀번호 변경\n            </RegistButton>\n          </li>\n        </InputBox>\n        <Title>회원탈퇴</Title>\n        <InputBox>\n          <label htmlFor=\"password\">비밀번호</label>\n          <PasswordBox>\n            <FilledInput\n              id=\"password\"\n              name=\"password\"\n              type={ShowPassword ? 'text' : 'password'}\n              placeholder=\"대/소문자,숫자,특수문자 포함 8~20자\"\n              {...register('password', {\n                required: true,\n                minLength: 8,\n                maxLength: 20,\n                validate: {\n                  checkLang: value =>\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\n                      pattern.test(value),\n                    ),\n                  checkLower: value =>\n                    [/[a-z]/].every(pattern => pattern.test(value)),\n                  checkUpper: value =>\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\n                  checkNumber: value =>\n                    [/[0-9]/].every(pattern => pattern.test(value)),\n                  checkSpec: value =>\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\n                },\n              })}\n            />\n            <PasswordButton>\n              <IconButton\n                aria-label=\"toggle_password\"\n                onClick={handleVisibility}\n              >\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </PasswordButton>\n          </PasswordBox>\n          {errors.password && (\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <label htmlFor=\"confirmPassword\">비밀번호 확인</label>\n          <FilledInput\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            type=\"password\"\n            placeholder=\"비밀번호를 다시 입력해주세요.\"\n            {...register('passwordConfirm', {\n              required: true,\n              validate: value => value === password.current,\n            })}\n          />\n          {errors.passwordConfirm && (\n            <ErrorMessage>\n              {PasswordConfirmError[errors.passwordConfirm.type]}\n            </ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <li>\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              회원탈퇴\n            </RegistButton>\n          </li>\n        </InputBox>\n      </ContentBox>\n    </FormBox>\n  );\n}\n\nexport default withRouter(Email);\n","import { useState } from 'react';\nimport FileUpload from 'react-material-file-upload';\n\nexport default function App() {\n  const [files, setFiles] = useState([]);\n  return (\n    <div className=\"App\">\n      <FileUpload value={files} onChange={setFiles} />\n    </div>\n  );\n}\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { getName, updateName } from 'modules/actions/user';\nimport Profile from './Profile';\nimport Uploader from './Uploader';\nimport {\n  FormBox,\n  ProfileBox,\n  ContentBox,\n  ErrorMessage,\n  InputBox,\n  FilledInput,\n  UploaderBox,\n  RegistButton,\n  Title,\n} from 'styles/form/change-styles';\n\nfunction Email({ history }) {\n  const {\n    register,\n    handleSubmit,\n\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n  });\n  const dispatch = useDispatch();\n  const userFrom = localStorage.getItem('userId');\n\n  const [oldName, getOldName] = useState('');\n\n  useEffect(() => {\n    dispatch(getName(userFrom)).then(response => {\n      getOldName(response.payload.name);\n    });\n  }, []);\n\n  const onSubmit = useCallback(user => {\n    user._id = userFrom;\n    dispatch(updateName(user)).then(response => {\n      if (!response.payload.changeSuccess) {\n        alert(response.payload.message);\n      } else {\n        if (response.payload.changeSuccess) {\n          alert('이름이 변경되었습니다.');\n          history.push('/mypage');\n        } else {\n          alert(response.payload.message);\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <FormBox onSubmit={handleSubmit(onSubmit)}>\n      <ProfileBox className=\"left\">\n        <Profile name={'개인정보 수정'} go={'/mypage/email'} />\n      </ProfileBox>\n      <ContentBox className=\"right\">\n        <Title>프로필 사진 변경</Title>\n        <InputBox>\n          <UploaderBox>\n            <Uploader />\n          </UploaderBox>\n        </InputBox>\n\n        <InputBox>\n          <li>\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              프로필 변경\n            </RegistButton>\n          </li>\n        </InputBox>\n        <Title>닉네임 변경</Title>\n        <InputBox>\n          <label htmlFor=\"oldName\">현재 닉네임</label>\n          <FilledInput id=\"oldName\" name=\"oldName\" value={oldName} readOnly />\n        </InputBox>\n        <InputBox>\n          <label htmlFor=\"name\">변경할 닉네임</label>\n          <FilledInput\n            id=\"name\"\n            name=\"name\"\n            type=\"name\"\n            placeholder=\"변경할 닉네임을 입력하세요\"\n            {...register('name', {\n              required: '닉네임을 입력하세요',\n            })}\n          />\n          {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}\n        </InputBox>\n        <InputBox>\n          <li>\n            <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              닉네임 변경\n            </RegistButton>\n          </li>\n        </InputBox>\n      </ContentBox>\n    </FormBox>\n  );\n}\n\nexport default withRouter(Email);\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport AddComment from 'components/BoardQuoteMaster/Section/Comment/AddComment';\nimport ReplyInput from 'components/BoardQuoteMaster/Section/Reply/ReplyInput';\nimport { getMyReply } from 'modules/actions/user';\nimport styled from 'styled-components';\nimport Reply from 'assests/Reply.png';\n\nfunction MyReply() {\n  const dispatch = useDispatch();\n  const [RepliesFrom, setRepliesFrom] = useState([]);\n  const [show, setShow] = useState(false);\n  const showHandler = () => setShow(!show);\n  const [commentId, getCommentId] = useState('');\n  const onRemove = id => {\n    setRepliesFrom(RepliesFrom.filter(RepliesFrom => RepliesFrom._id !== id));\n  };\n\n  useEffect(() => {\n    const userFrom = localStorage.getItem('userId');\n    dispatch(getMyReply({ userFrom: userFrom })).then(response => {\n      if (response.payload.success) {\n        saveOptions(response.payload.replies);\n      } else {\n        alert('대댓글을 불러오는데 실패했습니다.');\n      }\n    });\n  }, []);\n\n  const saveOptions = replies => {\n    const repliesList = [];\n    replies.forEach(element => {\n      repliesList.push(element.commentFrom);\n    });\n    setRepliesFrom(\n      [...new Set(repliesList.map(JSON.stringify))].map(JSON.parse),\n    );\n  };\n\n  return (\n    <>\n      {RepliesFrom.length === 0 && (\n        <NothingBox>\n          <NothingAlert>대댓글 목록이 없습니다.</NothingAlert>\n        </NothingBox>\n      )}\n      {RepliesFrom &&\n        RepliesFrom.map((comment, index) => {\n          return (\n            <CommentUl key={index}>\n              <React.Fragment key={index}>\n                <AddComment\n                  id={comment._id}\n                  user={comment.userFrom}\n                  time={comment.createdAt}\n                  writer={comment.commentWriter}\n                  title={comment.commentTitle}\n                  content={comment.commentContent}\n                  onRemove={onRemove}\n                />\n                <ReplyImg\n                  src={Reply}\n                  onClick={() => {\n                    showHandler();\n                    getCommentId(comment._id);\n                  }}\n                />\n                <li>\n                  {show && comment._id === commentId && (\n                    <ReplyInput\n                      id={commentId}\n                      name=\"Reply\"\n                      placeholder=\"대댓글을 작성해주세요.\"\n                      userFrom={comment.userFrom}\n                      writerFrom={comment.commentWriter}\n                    />\n                  )}\n                </li>\n              </React.Fragment>\n            </CommentUl>\n          );\n        })}\n    </>\n  );\n}\n\nexport default withRouter(MyReply);\n\nconst NothingBox = styled.div`\n  display: flex;\n  height: 500px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NothingAlert = styled.p`\n  font-size: 25px;\n  color: #ff0200;\n`;\n\nconst CommentUl = styled.ul`\n  position: relative;\n`;\n\nconst ReplyImg = styled.img`\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  top: 0;\n  right: 5px;\n  cursor: pointer;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getMyComment } from 'modules/actions/user';\nimport { updateComment } from 'modules/actions/comment';\nimport AddComment from 'components/BoardQuoteMaster/Section/Comment/AddComment';\nimport styled from 'styled-components';\n\nfunction MyEditComment({ history }) {\n  const dispatch = useDispatch();\n  const userFrom = localStorage.getItem('userId');\n  const [MyComment, setMyComment] = useState([]);\n  const [show, setShow] = useState(false);\n  const [commentId, getCommentId] = useState('');\n  const [inputs, setInput] = useState({\n    commentContent: '',\n  });\n  const { commentContent } = inputs;\n  const onChange = e => {\n    const { value, name } = e.target;\n    setInput({\n      ...inputs,\n      [name]: value,\n    });\n  };\n\n  const onRemove = id => {\n    setMyComment(MyComment.filter(MyComment => MyComment._id !== id));\n    history.push('/mypage');\n  };\n\n  useEffect(() => {\n    dispatch(getMyComment({ userFrom: userFrom })).then(response => {\n      if (response.payload.success) {\n        setMyComment(response.payload.comments);\n      } else {\n        alert('댓글을 불러오는데 실패했습니다.');\n      }\n    });\n  }, []);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    dispatch(\n      updateComment(userFrom, commentId, { commentContent: commentContent }),\n    ).then(response => {\n      if (!response.payload.success) {\n        alert('댓글 수정에 실패했습니다.');\n      } else {\n        if (response.payload.success) {\n          alert('댓글이 수정되었습니다.');\n          window.location.replace('/mypage/myComment');\n        } else {\n          alert(response.payload.message);\n        }\n      }\n    });\n  };\n\n  return (\n    <>\n      {show && (\n        <EditForm onSubmit={onSubmit}>\n          <input\n            name=\"commentContent\"\n            placeholder=\"댓글을 작성해주세요.\"\n            value={commentContent}\n            onChange={onChange}\n            className=\"commentInput\"\n          />\n          <CommentButton type=\"submit\" onClick={onSubmit}>\n            수정\n          </CommentButton>\n        </EditForm>\n      )}\n      {MyComment.length === 0 && (\n        <NothingBox>\n          <NothingAlert>댓글 목록이 없습니다.</NothingAlert>\n        </NothingBox>\n      )}\n      {MyComment &&\n        MyComment.map((comment, index) => {\n          return (\n            <React.Fragment key={index}>\n              <CommentUl>\n                <AddComment\n                  id={comment._id}\n                  user={comment.userFrom}\n                  time={comment.createdAt}\n                  writer={comment.commentWriter}\n                  title={comment.commentTitle}\n                  content={comment.commentContent}\n                  onRemove={onRemove}\n                />\n                <EditButton\n                  onClick={() => {\n                    getCommentId(comment._id);\n                    setShow(!show);\n                  }}\n                >\n                  수정\n                </EditButton>\n              </CommentUl>\n            </React.Fragment>\n          );\n        })}\n    </>\n  );\n}\n\nexport default withRouter(MyEditComment);\n\nconst EditButton = styled.button`\n  color: #ff0200;\n  font-size: 12px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin-top: 2.5px;\n`;\n\nconst CommentUl = styled.ul`\n  position: relative;\n`;\n\nconst CommentButton = styled.button`\n  border-radius: 8px;\n  padding-top: 3px;\n  font-weight: 600;\n  font-size: 14px;\n  margin-left: 10px;\n  width: 70px;\n  height: 35px;\n  text-align: center;\n  background-color: #ff0200;\n  color: #fff;\n  &:active {\n    opacity: 0.7;\n  }\n`;\n\nconst EditForm = styled.form`\n  margin-bottom: 20px;\n`;\n\nconst NothingBox = styled.div`\n  display: flex;\n  height: 500px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NothingAlert = styled.p`\n  font-size: 25px;\n  color: #ff0200;\n`;\n","import React from 'react';\nimport { Route, withRouter } from 'react-router';\nimport PageList from 'components/MyPage/PageList';\nimport Email from 'components/MyPage/Section/Email';\nimport Password from 'components/MyPage/Section/Password';\nimport Withdrawal from 'components/MyPage/Section/Withdrawal';\nimport MyBoardList from 'components/MyPage/Section/MyBoardList';\nimport MyComment from 'components/MyPage/Section/MyComment';\nimport MyReply from 'components/MyPage/Section/MyReply';\nimport MyFavorite from 'components/MyPage/Section/MyFavorite';\nimport MyEditComment from 'components/MyPage/Section/MyEditComment';\n\nfunction MyPage({ match }) {\n  return (\n    <>\n      <Route exact path={match.path} component={PageList} />\n      <Route path={`${match.path}/email`} component={Email} />\n      <Route path={`${match.path}/password`} component={Password} />\n      <Route path={`${match.path}/boardList`} component={MyBoardList} />\n      <Route path={`${match.path}/myComment`} component={MyEditComment} />\n      <Route path={`${match.path}/comment`} component={MyComment} />\n      <Route path={`${match.path}/reply`} component={MyReply} />\n      <Route path={`${match.path}/favorite`} component={MyFavorite} />\n      <Route path={`${match.path}/withdrawal`} component={Withdrawal} />\n    </>\n  );\n}\n\nexport default withRouter(MyPage);\n"],"sourceRoot":""}