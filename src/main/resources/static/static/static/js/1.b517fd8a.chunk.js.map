{"version":3,"sources":["components/BoardPlayground/Section/Board/BoardTitle.js","components/BoardPlayground/Section/Comment/DeleteComment.js","components/BoardPlayground/Section/Comment/AddComment.js","components/BoardPlayground/Section/Comment/CommentInput.js","components/BoardPlayground/Section/Reply/DeleteReply.js","components/BoardPlayground/Section/Reply/AddReply.js","components/BoardPlayground/Section/Reply/ReplyInput.js","components/BoardPlayground/BoardDetail.js","components/BoardPlayground/Section/Board/DeleteBoard.js","components/BoardPlayground/Section/Like/LikeButton.js","components/BoardPlayground/Section/Scrap/ScrapButton.js","components/BoardPlayground/Section/Comment/CommentButton.js","components/BoardPlayground/Section/ShowInfo/ShowInfo.js","components/BoardPlayground/Section/Board/AddBoard.js"],"names":["BoardTitleBlock","styled","div","BoardTitleBox","withRouter","props","dispatch","useDispatch","UserId","localStorage","getItem","CommentId","id","DeleteButton","onClick","window","confirm","deleteComment","then","response","payload","success","alert","onRemove","result","_id","button","useState","isAuthor","setIsAuthor","useEffect","isauthorBoard","user","boardId","AddCommentBox","NameBox","WriterBox","Writer","writer","Visitor","DeleteBox","CommentContent","content","TimeBox","time","span","CommentInput","name","placeholder","value","onChange","type","className","ReplyId","deleteReply","abortController","AbortController","fetchData","a","abort","ReplyBox","ReplyUl","ReplyLi","ReplyLi2","ReplyContent","li","ul","userFrom","writerFrom","replyWriter","Value","setValue","Replies","setReplies","ReplyCounts","setReplyCounts","variables","commentFrom","replyContent","FetchReply","getReply","replies","replyCounts","onSubmit","e","preventDefault","uploadReply","location","replace","pathname","onRemoveReply","filter","ReplyTotalBox","FormBox","currentTarget","ReplyButton","map","reply","index","Fragment","createdAt","form","BoardId","match","params","Comments","setComments","BoardDetail","setBoardDetail","BoardWriter","commentId","getCommentId","show","setShow","CommentsCounts","setCommentsCounts","boardFrom","commentContent","commentWriter","FetchComment","getComment","comments","commentCounts","getBoard","board","uploadComment","onRemoveComment","BoardBox","style","textDecoration","color","to","BoardTitle","AddBoard","title","viewCounts","history","push","CommentButton","comment","CommentUl","ReplyImg","src","Reply","img","deleteBoard","LikeButton","boardTitle","boardContent","boardWriter","likeCounts","setLikeCounts","userLiked","setUserLiked","getLike","catch","console","log","ischeckLike","liked","subtractionLike","additionLike","Like","LikeIcon","Counts","ScrapButton","scrapCounts","setScrapCounts","userScrapped","setUserScrapped","getScrap","ischeckScrap","scrapped","subtractionScrap","additionScrap","Scrap","ScrapIcon","CommentCounts","setCommentCounts","uploadCheck","useSelector","state","uploadSuccess","deleteCheck","deleteSuccess","Comment","CommentIcon","Count","Email","email","Description","userDescription","p","currentUser","showInfo","setShowInfo","AddBoardBox","BoardHeader","Title","WriterInfo","ProfileImg","Profile","undefined","field","OnlyWriter","AddBoardWriter","Field","ViewCounts","DeleteBoardBox","Content","ButtonBox","textAlign"],"mappings":"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","file":"static/js/1.b517fd8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BoardTitleBlock = styled.div`\r\n  width: 1000px;\r\n  padding-top: 0rem;\r\n  font-family: 'SCDream4R';\r\n  font-size: 23px;\r\n  font-weight: normal;\r\n  margin-left: -5px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst BoardTitleBox = ({}) => {\r\n  return (\r\n    <BoardTitleBlock>\r\n      <div>쿼카놀이터</div>\r\n    </BoardTitleBlock>\r\n  );\r\n};\r\n\r\nexport default BoardTitleBox;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteComment } from 'modules/actions/comment';\r\nimport styled from 'styled-components';\r\n\r\nfunction DeleteComment(props) {\r\n  const dispatch = useDispatch();\r\n  const UserId = localStorage.getItem('userId');\r\n  const CommentId = props.id;\r\n\r\n  const onDelete = () => {\r\n    let confirmDelete = window.confirm('댓글을 삭제하시겠습니까 ?');\r\n    confirmDelete &&\r\n      dispatch(deleteComment(UserId, CommentId)).then(response => {\r\n        if (response.payload.success) {\r\n          alert('댓글을 삭제했습니다.');\r\n          props.onRemove(response.payload.result._id);\r\n        } else {\r\n          alert('댓글 삭제에 실패했습니다.');\r\n        }\r\n      });\r\n  };\r\n\r\n  return <DeleteButton onClick={onDelete}>댓글 삭제</DeleteButton>;\r\n}\r\n\r\nexport default withRouter(DeleteComment);\r\n\r\nconst DeleteButton = styled.button`\r\n  color: #ff0200;\r\n  font-size: 12px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport UpdateTime from 'library/utils/updateTime';\r\nimport DeleteComment from './DeleteComment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { isauthorBoard } from 'modules/actions/board';\r\nimport styled from 'styled-components';\r\n\r\nfunction AddComment(props) {\r\n  const dispatch = useDispatch();\r\n  const [isAuthor, setIsAuthor] = useState(false);\r\n  const UserId = localStorage.getItem('userId');\r\n\r\n  const checkAuthor = () => {\r\n    dispatch(isauthorBoard(props.user, props.boardId)).then(response => {\r\n      if (response.payload.success) {\r\n        setIsAuthor(true);\r\n      } else {\r\n        setIsAuthor(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAuthor();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AddCommentBox key={props.id}>\r\n        <NameBox>\r\n          <WriterBox>\r\n            {isAuthor ? (\r\n              <Writer>\r\n                {props.writer}\r\n                <span>(작성자)</span>\r\n              </Writer>\r\n            ) : (\r\n              <Visitor>{props.writer}</Visitor>\r\n            )}\r\n          </WriterBox>\r\n          <DeleteBox>\r\n            {props.user === UserId ? (\r\n              <DeleteComment\r\n                id={props.id}\r\n                user={props.user}\r\n                onRemove={props.onRemove}\r\n              />\r\n            ) : null}\r\n          </DeleteBox>\r\n        </NameBox>\r\n        <CommentContent>{props.content}</CommentContent>\r\n        <TimeBox>\r\n          <UpdateTime time={props.time} />\r\n        </TimeBox>\r\n      </AddCommentBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(AddComment);\r\n\r\nconst AddCommentBox = styled.div`\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst NameBox = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%:\r\n`;\r\n\r\nconst WriterBox = styled.div`\r\n  margin-top: 5px;\r\n`;\r\n\r\nconst Writer = styled.span`\r\n  height: 25px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #fff;\r\n  background-color: #1a83ff;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  margin-top: 5px;\r\n  & > span {\r\n    font-size: 11px;\r\n    margin-left: 5px;\r\n  }\r\n  padding: 3px 5px;\r\n`;\r\n\r\nconst Visitor = styled.span`\r\n  height: 25px;\r\n  font-size: 14px;\r\n  background-color: #ccc;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  padding: 3px 5px;\r\n`;\r\n\r\nconst DeleteBox = styled.div`\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst CommentContent = styled.div`\r\n  margin: 10px 0 10px 20px;\r\n`;\r\n\r\nconst TimeBox = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 30px;\r\n  font-size: 14px;\r\n  padding-top: 3px;\r\n  justify-content: flex-start;\r\n  color: #aaa;\r\n  font-weight: 600;\r\n  margin-left: 10px;\r\n`;\r\n","import React from 'react';\r\nimport 'styles/board/board.css';\r\n\r\nconst CommentInput = function ({ name, placeholder, value, onChange }) {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name={name}\r\n      placeholder={placeholder}\r\n      onChange={onChange}\r\n      value={value}\r\n      className=\"commentInput\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default CommentInput;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteReply } from 'modules/actions/reply';\r\nimport styled from 'styled-components';\r\n\r\nfunction DeleteReply(props) {\r\n  const dispatch = useDispatch();\r\n  const UserId = localStorage.getItem('userId');\r\n  const ReplyId = props.id;\r\n\r\n  const onDelete = () => {\r\n    let confirmDelete = window.confirm('대댓글을 삭제하시겠습니까 ?');\r\n    confirmDelete &&\r\n      dispatch(deleteReply(UserId, ReplyId)).then(response => {\r\n        if (response.payload.success) {\r\n          alert('대댓글을 삭제했습니다.');\r\n          props.onRemove(response.payload.result._id);\r\n        } else {\r\n          alert('대댓글 삭제에 실패했습니다.');\r\n        }\r\n      });\r\n  };\r\n\r\n  return <DeleteButton onClick={onDelete}>대댓글 삭제</DeleteButton>;\r\n}\r\n\r\nexport default withRouter(DeleteReply);\r\n\r\nconst DeleteButton = styled.button`\r\n  color: #ff0200;\r\n  font-size: 12px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport UpdateTime from 'library/utils/updateTime';\r\nimport DeleteReply from './DeleteReply';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { isauthorBoard } from 'modules/actions/board';\r\n\r\nfunction AddReply(props) {\r\n  const dispatch = useDispatch();\r\n  const [isAuthor, setIsAuthor] = useState(false);\r\n  const UserId = localStorage.getItem('userId');\r\n\r\n  const checkAuthor = () => {\r\n    dispatch(isauthorBoard(props.user, props.boardId)).then(response => {\r\n      if (response.payload.success) {\r\n        setIsAuthor(true);\r\n      } else {\r\n        setIsAuthor(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let abortController = new AbortController();\r\n    const fetchData = async () => {\r\n      await checkAuthor();\r\n    };\r\n    fetchData();\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ReplyBox key={props.id}>\r\n        <ReplyUl>\r\n          <ReplyLi>\r\n            <DeleteBox>\r\n              {props.user === UserId ? (\r\n                <DeleteReply\r\n                  id={props.id}\r\n                  user={props.user}\r\n                  onRemove={props.onRemove}\r\n                />\r\n              ) : null}\r\n            </DeleteBox>\r\n            <WriterBox>\r\n              {isAuthor ? (\r\n                <Writer>\r\n                  {props.writer}\r\n                  <span>(작성자)</span>\r\n                </Writer>\r\n              ) : (\r\n                <Visitor>{props.writer}</Visitor>\r\n              )}\r\n            </WriterBox>\r\n          </ReplyLi>\r\n          <ReplyLi2>\r\n            <ReplyContent>{props.content}</ReplyContent>\r\n          </ReplyLi2>\r\n          <TimeBox>\r\n            <UpdateTime time={props.time} />\r\n          </TimeBox>\r\n        </ReplyUl>\r\n      </ReplyBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(AddReply);\r\n\r\nconst ReplyBox = styled.div`\r\n  padding: 5px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst WriterBox = styled.div`\r\n  margin-top: 5px;\r\n`;\r\n\r\nconst DeleteBox = styled.div`\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst Writer = styled.span`\r\n  height: 25px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #fff;\r\n  background-color: #1a83ff;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  margin-top: 5px;\r\n  & > span {\r\n    font-size: 11px;\r\n    margin-left: 5px;\r\n  }\r\n  padding: 3px 5px;\r\n`;\r\n\r\nconst Visitor = styled.span`\r\n  height: 25px;\r\n  font-size: 14px;\r\n  background-color: #ccc;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  padding: 3px 5px;\r\n`;\r\n\r\nconst ReplyLi = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  align-items: center;\r\n`;\r\n\r\nconst ReplyUl = styled.ul`\r\n  width: 100%;\r\n`;\r\n\r\nconst ReplyContent = styled.div`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst ReplyLi2 = styled.li`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin: 10px 0 10px 20px;\r\n`;\r\n\r\nconst TimeBox = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 30px;\r\n  font-size: 14px;\r\n  padding-top: 3px;\r\n  justify-content: flex-start;\r\n  color: #aaa;\r\n  font-weight: 600;\r\n  margin-left: 10px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AddReply from './AddReply';\r\nimport { useDispatch } from 'react-redux';\r\nimport { uploadReply, getReply } from 'modules/actions/reply';\r\nimport 'styles/board/board.css';\r\nimport styled from 'styled-components';\r\n\r\nconst ReplyInput = function ({\r\n  id,\r\n  name,\r\n  placeholder,\r\n  userFrom,\r\n  writerFrom,\r\n  boardId,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const CommentId = id;\r\n  const replyWriter = writerFrom;\r\n  const [Value, setValue] = useState('');\r\n  const [Replies, setReplies] = useState([]);\r\n  const [ReplyCounts, setReplyCounts] = useState('');\r\n  const onChange = e => {\r\n    setValue(e.currentTarget.value);\r\n  };\r\n  let variables = {\r\n    userFrom: userFrom,\r\n    commentFrom: CommentId,\r\n    replyContent: Value,\r\n    replyWriter: replyWriter,\r\n  };\r\n\r\n  const FetchReply = () => {\r\n    dispatch(getReply(variables)).then(response => {\r\n      if (response.payload.success) {\r\n        setReplies(response.payload.replies);\r\n        setReplyCounts(response.payload.replyCounts);\r\n      } else {\r\n        alert('대댓글을 조회할 수 없습니다.');\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let abortController = new AbortController();\r\n    const fetchData = async () => {\r\n      await FetchReply();\r\n    };\r\n    fetchData();\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (!Value) {\r\n      alert('대댓글을 작성해주세요.');\r\n      return;\r\n    }\r\n    dispatch(uploadReply(variables)).then(response => {\r\n      alert('대댓글이 등록되었습니다.');\r\n      setValue('');\r\n      FetchReply();\r\n      window.location.replace(`${location.pathname}`);\r\n    });\r\n  };\r\n\r\n  const onRemoveReply = id => {\r\n    setReplies(Replies.filter(Replies => Replies._id !== id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ReplyTotalBox>\r\n        <FormBox onSubmit={onSubmit}>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              id={id}\r\n              name={name}\r\n              placeholder={placeholder}\r\n              value={Value}\r\n              onChange={onChange}\r\n              className=\"replyInput\"\r\n            />\r\n            <ReplyButton type=\"submit\" onClick={onSubmit}>\r\n              대댓글 등록\r\n            </ReplyButton>\r\n          </div>\r\n        </FormBox>\r\n        {Replies &&\r\n          Replies.map((reply, index) => {\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <AddReply\r\n                  id={reply._id}\r\n                  boardId={boardId}\r\n                  ReplyCounts={ReplyCounts}\r\n                  user={reply.userFrom}\r\n                  time={reply.createdAt}\r\n                  writer={reply.replyWriter}\r\n                  content={reply.replyContent}\r\n                  onRemove={onRemoveReply}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n      </ReplyTotalBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(ReplyInput);\r\n\r\nconst ReplyButton = styled.button`\r\n  border-radius: 8px;\r\n  padding-top: 3px;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  margin-left: 10px;\r\n  width: 90px;\r\n  height: 35px;\r\n  text-align: center;\r\n  background-color: #ff0200;\r\n  color: #fff;\r\n  &active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst FormBox = styled.form`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst ReplyTotalBox = styled.div`\r\n  padding: 0 0 50px 50px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport AddBoard from './Section/Board/AddBoard';\r\nimport AddComment from './Section/Comment/AddComment';\r\nimport CommentInput from './Section/Comment/CommentInput';\r\nimport ReplyInput from './Section/Reply/ReplyInput';\r\nimport { uploadComment, getComment } from 'modules/actions/comment';\r\nimport { getBoard } from 'modules/actions/board';\r\nimport styled from 'styled-components';\r\nimport Reply from 'assests/Reply.png';\r\nimport List from 'assests/List.png';\r\nimport BoardTitleBox from './Section/Board/BoardTitle';\r\n\r\nconst boardIdNew = 'quotkaId';\r\nconst boardUserNew = 'quotkaUser';\r\nconst boardTimeNew = '2022-07-20';\r\nconst boardWriterNew = '쿼억하';\r\nconst boardTitleNew = 'New Title Test';\r\nconst boardContentNew =\r\n  'board content test [수원=뉴시스]박상욱 기자 = 고령사회(65세 이상 인구 비율 14% 이상)에 진입한 경기도가 오는 15일 노인학대 예방의 날을 앞두고 다양한 노인 보호정책을 추진 중이다. 13일 도에 따르면 올해 5월 말 기준 경기도의 65세 이상 노인인구는 192만9000여 명으로 도내 전체 인구 대비 14.2%를 차지한다. 이는 지난해 5월 말 13.5%(181만8000여 명) 대비 0.7%p 상승한 것으로, 국내 평균(2018년)보다 3년여 늦게 고령사회에 진입했다. 올해 국내 노인인구 비율은 17.5%다. 노인인구 증가와 함께 노인학대 신고 건수도 2019년 2445건, 2020년 2592건, 2021년 2881건으로 늘고 있다. 이에 따라 도는 노인학대 대응 관련 예산을 2020년 20억 원에서 2022년 48억 원으로 2.4배 증액하는 등 노인학대 예방에 총력을 기울이고 있다. 현재 도내 노인보호전문기관 5곳(수원, 성남, 부천, 의정부, 고양), 학대피해노인 전용쉼터 2곳(부천, 의정부)를 운영하는 등 전국 최대 규모의 노인학대 대응 인프라를 구축했다. 또, 전국 최초로 노인보호전문기관 전담 변호사를 배치해 학대 발생 시 조사의 전문성과 신뢰성을 확보하고, 피해노인을 위한 법률적 지원을 시행하고 있다. 관련 기관 종사자의 임금 및 수당 인상을 통한 처우도 개선, 노인학대와 관련된 상담·조사·예방교육 등 제공 서비스 질을 높였다. 노인학대에 대한 상담 및 신고 등은 누구나 1577-1389로 문의하면 된다.조태훈 경기도 노인복지과장은 \"올해 하반기에는 경기 남부지역 내 학대피해노인 전용쉼터를 추가로 설치할 계획으로, 현재 경기 서부·북부 지역에 있는 학대피해노인 전용쉼터의 보호 사각지대를 해소하고 학대피해노인의 신속 분리 보호와 일상 복귀가 이뤄질 것으로 기대한다\"고 말했다. 한편, 도는 노인학대 예방의 날을 맞아 14일 경기문화재단 다산홀에서 노인학대 예방의 날(6월 15일) 기념행사를 개최한다. 유엔(UN)은 2006년부터 매년 6월 15일을 세계 노인 학대인식의 날로 지정했다. 우리나라는 2017년도부터 범국민적으로 노인 학대에 대한 인식을 높이고 관심을 유도하기 위해 매년 6월 15일을 노인학대 예방의 날로 지정해 기념해 왔다.';\r\nconst boardViewCounts = '33';\r\n\r\nconst commentIdNew = 'commentId';\r\nconst commentUserNew = 'commentUser';\r\nconst commentTimeNew = '2022-07-21';\r\nconst commentWriterNew = 'commentWriter';\r\nconst commentContentNew = 'comment content test';\r\n\r\nfunction BoardDetail(props) {\r\n  const dispatch = useDispatch();\r\n  const BoardId = props.match.params.boardId;\r\n  const userFrom = localStorage.getItem('userId');\r\n  const writerFrom = localStorage.getItem('userName');\r\n  const [Comments, setComments] = useState([]);\r\n  const [BoardDetail, setBoardDetail] = useState([]);\r\n  const [BoardWriter, setBoardWriter] = useState(writerFrom);\r\n  const [commentId, getCommentId] = useState('');\r\n  const [Value, setValue] = useState('');\r\n  const [show, setShow] = useState(false);\r\n  const showHandler = () => setShow(!show);\r\n  const onChange = e => {\r\n    setValue(e.currentTarget.value);\r\n  };\r\n  const [CommentsCounts, setCommentsCounts] = useState('');\r\n  let variables = {\r\n    userFrom: userFrom,\r\n    boardFrom: BoardId,\r\n    commentContent: Value,\r\n    commentWriter: BoardWriter,\r\n  };\r\n\r\n  const FetchComment = () => {\r\n    dispatch(getComment(variables)).then(response => {\r\n      if (response.payload.success) {\r\n        setComments(response.payload.comments);\r\n        setCommentsCounts(response.payload.commentCounts);\r\n      } else {\r\n        alert('댓글을 보여줄 수 없습니다.');\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getBoard(BoardId)).then(response => {\r\n      if (response.payload.success) {\r\n        setBoardDetail(response.payload.board);\r\n      } else {\r\n        alert('게시글 가져오기에 실패했습니다.');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    FetchComment();\r\n  }, [CommentsCounts]);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (!Value) {\r\n      alert('댓글을 작성해주세요.');\r\n      return;\r\n    }\r\n\r\n    dispatch(uploadComment(variables)).then(response => {\r\n      alert('댓글이 등록되었습니다.');\r\n      setValue('');\r\n      FetchComment();\r\n      window.location.replace(`${location.pathname}`);\r\n    });\r\n  };\r\n\r\n  const onRemoveBoard = id => {\r\n    setBoardDetail(BoardDetail.filter(BoardDetail => BoardDetail._id !== id));\r\n    props.history.push('/board'); // 나중에 boardlist로 수정할 부분\r\n  };\r\n\r\n  const onRemoveComment = id => {\r\n    setComments(Comments.filter(Comments => Comments._id !== id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BoardBox key={props.id}>\r\n        <Link\r\n          style={{ textDecoration: 'none', color: 'black' }}\r\n          to=\"/playground/boardlist\"\r\n        >\r\n          <BoardTitleBox></BoardTitleBox>\r\n        </Link>\r\n        <AddBoard\r\n          id={boardIdNew}\r\n          user={boardUserNew}\r\n          time={boardTimeNew}\r\n          writer={boardWriterNew}\r\n          title={boardTitleNew}\r\n          content={boardContentNew}\r\n          viewCounts={boardViewCounts}\r\n          history={`${props.history}`}\r\n          onRemove={onRemoveBoard}\r\n        />\r\n\r\n        <form onSubmit={onSubmit}>\r\n          <CommentInput\r\n            name=\"Comment\"\r\n            placeholder=\"댓글을 작성해주세요.\"\r\n            value={Value}\r\n            onChange={onChange}\r\n          />\r\n          <CommentButton type=\"submit\" onClick={onSubmit}>\r\n            작성\r\n          </CommentButton>\r\n        </form>\r\n        {Comments &&\r\n          Comments.map((comment, index) => {\r\n            return (\r\n              <CommentUl key={index}>\r\n                <React.Fragment key={index}>\r\n                  <AddComment\r\n                    id={comment._id}\r\n                    boardId={BoardId}\r\n                    user={comment.userFrom}\r\n                    time={comment.createdAt}\r\n                    writer={comment.commentWriter}\r\n                    content={comment.commentContent}\r\n                    onRemove={onRemoveComment}\r\n                  />\r\n                  <ReplyImg\r\n                    src={Reply}\r\n                    onClick={() => {\r\n                      showHandler();\r\n                      getCommentId(comment._id);\r\n                    }}\r\n                  />\r\n                  <li>\r\n                    {show && comment._id === commentId && (\r\n                      <ReplyInput\r\n                        id={commentId}\r\n                        boardId={BoardId}\r\n                        name=\"Reply\"\r\n                        placeholder=\"대댓글을 작성해주세요.\"\r\n                        userFrom={userFrom}\r\n                        writerFrom={writerFrom}\r\n                      />\r\n                    )}\r\n                  </li>\r\n                </React.Fragment>\r\n              </CommentUl>\r\n            );\r\n          })}\r\n      </BoardBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(BoardDetail);\r\n\r\nconst BoardBox = styled.div`\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  height: 100%;\r\n`;\r\n\r\nconst CommentButton = styled.button`\r\n  border-radius: 8px;\r\n  padding-top: 3px;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  margin-left: 10px;\r\n  width: 70px;\r\n  height: 35px;\r\n  text-align: center;\r\n  background: #c5ad81;\r\n  color: white;\r\n  &:active {\r\n    background: rgba(0, 0, 0, 0.3);\r\n  }\r\n`;\r\nconst CommentUl = styled.ul`\r\n  position: relative;\r\n`;\r\n\r\nconst ReplyImg = styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ListImg = styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n  padding: 5px;\r\n  background-color: #eee;\r\n  border-radius: 50px;\r\n`;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteBoard } from 'modules/actions/board';\r\nimport styled from 'styled-components';\r\n\r\nfunction DeleteBoard(props) {\r\n  const dispatch = useDispatch();\r\n  const UserId = localStorage.getItem('userId');\r\n  const BoardId = props.board;\r\n\r\n  const onDelete = () => {\r\n    let confirmDelete = window.confirm('게시글을 삭제하시겠습니까?');\r\n    confirmDelete &&\r\n      dispatch(deleteBoard(UserId, BoardId)).then(response => {\r\n        if (response.payload.success) {\r\n          alert('게시글을 삭제했습니다.');\r\n          props.onRemove(response.payload.result._id);\r\n        } else {\r\n          alert('게시글 삭제에 실패했습니다.');\r\n        }\r\n      });\r\n  };\r\n  return <DeleteButton onClick={onDelete}>삭제</DeleteButton>;\r\n}\r\n\r\nexport default withRouter(DeleteBoard);\r\n\r\nconst DeleteButton = styled.button`\r\n  color: #ff0200;\r\n  font-size: 12px;\r\n  width: 50px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  getLike,\r\n  ischeckLike,\r\n  subtractionLike,\r\n  additionLike,\r\n} from 'modules/actions/like';\r\nimport styled from 'styled-components';\r\nimport LikeIcon from 'assests/likee.png';\r\nimport 'styles/board/button.css';\r\n\r\nfunction LikeButton({ boardId, boardTitle, boardContent, boardWriter }) {\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [likeCounts, setLikeCounts] = useState(0);\r\n  const [userLiked, setUserLiked] = useState(false);\r\n  let variables = {\r\n    userFrom: userFrom,\r\n    boardFrom: boardId,\r\n    boardWriter: boardWriter,\r\n    boardTitle: boardTitle,\r\n    boardContent: boardContent,\r\n  };\r\n\r\n  const getLikeNumber = () => {\r\n    dispatch(getLike(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('좋아요 정보를 가져오는데 실패했습니다.');\r\n          return;\r\n        }\r\n        setLikeCounts(response.payload.likeCounts);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const isCheckLike = () => {\r\n    dispatch(ischeckLike(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('좋아요 정보를 가져오는데 실패했습니다.');\r\n          return;\r\n        }\r\n        setUserLiked(response.payload.liked);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const subLike = () => {\r\n    dispatch(subtractionLike(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('좋아요 삭제를 실패했습니다.');\r\n          return;\r\n        }\r\n        setLikeCounts(likeCounts - 1);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const addLike = () => {\r\n    dispatch(additionLike(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('좋아요 등록을 실패했습니다.');\r\n          return;\r\n        }\r\n        setLikeCounts(likeCounts + 1);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const handleLike = e => {\r\n    e.preventDefault();\r\n    userLiked ? subLike() : addLike();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLikeNumber();\r\n    isCheckLike();\r\n  }, [likeCounts, userLiked]);\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleLike}>\r\n        <Like src={LikeIcon} />\r\n        <Counts>\r\n          <span>{likeCounts}</span>\r\n        </Counts>\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LikeButton;\r\n\r\nconst Like = styled.img`\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: -23px;\r\n  margin-top: 3px;\r\n`;\r\n\r\nconst Counts = styled.span`\r\n  font-size: 15px;\r\n  color: gray;\r\n  text-align: left;\r\n  margin-top: 4px;\r\n  margin-right: 10px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  getScrap,\r\n  ischeckScrap,\r\n  subtractionScrap,\r\n  additionScrap,\r\n} from 'modules/actions/scrap';\r\nimport styled from 'styled-components';\r\nimport ScrapIcon from 'assests/star.png';\r\n\r\nfunction ScrapButton({ boardId, boardTitle, boardContent, boardWriter }) {\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [scrapCounts, setScrapCounts] = useState(0);\r\n  const [userScrapped, setUserScrapped] = useState(false);\r\n  let variables = {\r\n    userFrom: userFrom,\r\n    boardFrom: boardId,\r\n    boardWriter: boardWriter,\r\n    boardTitle: boardTitle,\r\n    boardContent: boardContent,\r\n  };\r\n\r\n  const getScrapNumber = () => {\r\n    dispatch(getScrap(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('스크랩 정보를 가져오는데 실패했습니다.');\r\n          return;\r\n        }\r\n        setScrapCounts(response.payload.scrapCounts);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const isCheckScrap = () => {\r\n    dispatch(ischeckScrap(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('스크랩 정보를 가져오는데 실패했습니다.');\r\n          return;\r\n        }\r\n        setUserScrapped(response.payload.scrapped);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const subScrap = () => {\r\n    dispatch(subtractionScrap(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('스크랩 삭제를 실패했습니다.');\r\n          return;\r\n        }\r\n        setScrapCounts(scrapCounts - 1);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const addScrap = () => {\r\n    dispatch(additionScrap(variables))\r\n      .then(response => {\r\n        if (!response.payload.success) {\r\n          alert('스크랩 등록을 실패했습니다.');\r\n          return;\r\n        }\r\n        setScrapCounts(scrapCounts + 1);\r\n      })\r\n      .catch(e => console.log(e));\r\n  };\r\n\r\n  const handleScrap = e => {\r\n    e.preventDefault();\r\n    userScrapped ? subScrap() : addScrap();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getScrapNumber();\r\n    isCheckScrap();\r\n  }, [scrapCounts, userScrapped]);\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleScrap}>\r\n        <Scrap src={ScrapIcon} />\r\n        <Counts>\r\n          <span>{scrapCounts}</span>\r\n        </Counts>\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ScrapButton;\r\n\r\nconst Scrap = styled.img`\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: -23px;\r\n  margin-top: 3px;\r\n`;\r\n\r\nconst Counts = styled.span`\r\n  font-size: 15px;\r\n  color: gray;\r\n  text-align: left;\r\n  margin-top: 4px;\r\n  margin-right: 10px;\r\n`;\r\n","import { getComment } from 'modules/actions/comment';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport CommentIcon from 'assests/commentt.png';\r\n\r\nfunction CommentButton({ boardId }) {\r\n  const dispatch = useDispatch();\r\n  const userFrom = localStorage.getItem('userId');\r\n  const [CommentCounts, setCommentCounts] = useState(0);\r\n  const uploadCheck = useSelector(state => state.comment.uploadSuccess);\r\n  const deleteCheck = useSelector(state => state.comment.deleteSuccess);\r\n  let variables = {\r\n    userFrom: userFrom,\r\n    boardFrom: boardId,\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getComment(variables)).then(response => {\r\n      if (response.payload.success) {\r\n        setCommentCounts(response.payload.commentCounts);\r\n      } else {\r\n        alert('댓글을 보여줄 수 없습니다.');\r\n      }\r\n    });\r\n  }, [uploadCheck, deleteCheck]);\r\n\r\n  return (\r\n    <button>\r\n      <Comment src={CommentIcon} />\r\n      <Count>\r\n        <span>{CommentCounts}</span>\r\n      </Count>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default withRouter(CommentButton);\r\n\r\nconst Comment = styled.img`\r\n  width: 15px;\r\n  height: 15px;\r\n  margin-right: -23px;\r\n  margin-top: 3px;\r\n`;\r\n\r\nconst Count = styled.span`\r\n  font-size: 15px;\r\n  color: gray;\r\n  text-align: left;\r\n  margin-top: 4px;\r\n`;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nfunction ShowInfo(props) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <li>\r\n          <Email>{props.email}</Email>\r\n        </li>\r\n        <li>\r\n          <Description>{props.userDescription}</Description>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(ShowInfo);\r\n\r\nconst Email = styled.p`\r\n  font-size: 15px;\r\n  letter-spacing: -0.5px;\r\n  display: flex;\r\n  width: 170px;\r\n  border-radius: 8px;\r\n  padding-left: 5px;\r\n  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.5);\r\n  margin-bottom: 8px;\r\n  color: #aaa;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  border-radius: 8px;\r\n  padding-left: 5px;\r\n  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.5);\r\n  color: #aaa;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport UpdateTime from 'library/utils/updateTime';\r\nimport DeleteBoard from './DeleteBoard';\r\nimport LikeButton from '../Like/LikeButton';\r\nimport ScrapButton from '../Scrap/ScrapButton';\r\nimport CommentButton from '../Comment/CommentButton';\r\nimport ShowInfo from '../ShowInfo/ShowInfo';\r\nimport Github from 'assests/Github.png';\r\nimport styled from 'styled-components';\r\nimport Profile from 'assests/Profile.png';\r\n\r\nfunction AddBoard(props) {\r\n  const currentUser = window.localStorage.getItem('userId');\r\n  const [showInfo, setShowInfo] = useState(false);\r\n  const showHandler = () => {\r\n    setShowInfo(!showInfo);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddBoardBox key={props.id}>\r\n        <div>\r\n          <BoardHeader>\r\n            <Title>{props.title}</Title>\r\n            <WriterInfo>\r\n              <div className=\"profileImg\">\r\n                <ProfileImg src={Profile} />\r\n              </div>\r\n              <ul>\r\n                <li>\r\n                  {props.user.field === undefined ? (\r\n                    <OnlyWriter>{props.writer}</OnlyWriter>\r\n                  ) : (\r\n                    <AddBoardWriter onClick={showHandler}>\r\n                      <NameBox>\r\n                        <Writer>{props.writer}</Writer>\r\n                        <Field>{props.user.field}</Field>\r\n                      </NameBox>\r\n                    </AddBoardWriter>\r\n                  )}\r\n                </li>\r\n                <li>\r\n                  <div className=\"timeView\">\r\n                    <TimeBox>\r\n                      <UpdateTime time={props.time} />\r\n                    </TimeBox>\r\n                    <ViewCounts>조회수 {props.viewCounts}</ViewCounts>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </WriterInfo>\r\n            <ul>\r\n              <li>\r\n                <DeleteBoardBox>\r\n                  {props.user !== undefined ? (\r\n                    props.user === currentUser ? (\r\n                      <>\r\n                        <DeleteBoard\r\n                          board={props.id}\r\n                          user={props.user}\r\n                          history={props.history}\r\n                          onRemove={props.onRemove}\r\n                        />\r\n                      </>\r\n                    ) : null\r\n                  ) : props.user._id === currentUser ? (\r\n                    <>\r\n                      <DeleteBoard\r\n                        board={props.id}\r\n                        user={props.user}\r\n                        history={props.history}\r\n                        onRemove={props.onRemove}\r\n                      />\r\n                    </>\r\n                  ) : null}\r\n                </DeleteBoardBox>\r\n              </li>\r\n            </ul>\r\n          </BoardHeader>\r\n        </div>\r\n        <div>\r\n          <Content>{props.content}</Content>\r\n        </div>\r\n        <ButtonBox>\r\n          <div style={{ textAlign: 'left' }}>\r\n            <LikeButton\r\n              boardId={props.id}\r\n              boardWriter={props.writer}\r\n              boardTitle={props.title}\r\n              boardContent={props.content}\r\n            />\r\n            <ScrapButton\r\n              boardId={props.id}\r\n              boardWriter={props.writer}\r\n              boardTitle={props.title}\r\n              boardContent={props.content}\r\n            />\r\n            <Link to={`/playground/board/${props.id}`}>\r\n              <CommentButton boardId={props.id} />\r\n            </Link>\r\n          </div>\r\n        </ButtonBox>\r\n      </AddBoardBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(AddBoard);\r\n\r\nconst BoardHeader = styled.span`\r\n  width: 100%;\r\n`;\r\n\r\nconst WriterInfo = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin-top: 5px;\r\n\r\n  .profileImg {\r\n    margin-right: 0px;\r\n  }\r\n\r\n  ul {\r\n    margin-left: 10px;\r\n    margin-top: 5px;\r\n  }\r\n\r\n  .timeView {\r\n    display: flex;\r\n    align-items: left;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-family: 'SCDream4R';\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n  padding-left: 0px;\r\n  margin-bottom: 1px;\r\n  margin-top: -5px;\r\n`;\r\n\r\nconst AddBoardBox = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst AddBoardWriter = styled.li`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin-top; 10px;\r\n`;\r\n\r\nconst Writer = styled.span`\r\n  width: 60px;\r\n  height: 20px;\r\n  font-size: 15px;\r\n  padding-top: 3px;\r\n  font-family: 'SCDream4R';\r\n  font-weight: 500;\r\n  color: black;\r\n  background-color: white;\r\n  margin: 0 auto;\r\n  text-align: left;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst OnlyWriter = styled.span`\r\n  width: 60px;\r\n  height: 20px;\r\n  font-size: 15px;\r\n  padding-top: 3px;\r\n  font-family: 'SCDream4R';\r\n  font-weight: 500;\r\n  color: black;\r\n  background-color: white;\r\n  margin: 0 auto;\r\n  text-align: left;\r\n`;\r\n\r\nconst Field = styled.span`\r\n  font-size: 12px;\r\n  width: 60px;\r\n  height: 30px;\r\n  display: flex;\r\n  padding-top: 9px;\r\n  color: #aaa;\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n  width: 45px;\r\n  height: 45px;\r\n  padding: 3px;\r\n  background-color: #eee;\r\n  border-radius: 50px;\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst TimeBox = styled.div`\r\n  width: 100px;\r\n  height: 30px;\r\n  font-size: 14px;\r\n  padding-top: 3px;\r\n  color: #aaa;\r\n  font-family: 'SCDream';\r\n  font-weight: 900;\r\n`;\r\n\r\nconst ViewCounts = styled.div`\r\n  width: 100px;\r\n  margin-left: 10px;\r\n  padding-top: 3px;\r\n  font-family: 'SCDream';\r\n  font-size: 14px;\r\n  color: #aaa;\r\n  font-weight: 900;\r\n`;\r\n\r\nconst NameBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst InfoBox = styled.li`\r\n  width: 150px;\r\n  margin-left: 2px;\r\n  border-radius: 8px;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  border-top: 1px solid rgba(0, 0, 0, 0.07);\r\n  font-size: 15px;\r\n  padding-left: 2px;\r\n  padding-top: 30px;\r\n  padding-bottom: 35px;\r\n  margin-top: 20px;\r\n  line-height: 25px;\r\n  font-weight: 900;\r\n`;\r\n\r\nconst ButtonBox = styled.div`\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.07);\r\n  padding-bottom: 35px;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst DeleteBoardBox = styled.div``;\r\n"],"sourceRoot":""}