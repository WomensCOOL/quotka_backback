{"version":3,"sources":["assests/Logo.png","library/options/errors.js","styles/form/styles.js","components/Register/Content.js","pages/Register.js"],"names":["EmailError","required","checkPattern","PasswordError","minLength","maxLength","checkLower","checkUpper","checkSpec","checkLang","PasswordConfirmError","validate","NameError","FormBox","styled","form","FormTitle","div","FormSmallTitle","InputBox","FilledInput","input","ErrorMessage","img","p","PasswordBox","PasswordButton","LoginButton","button","GoogleItem","TextBox","RegistButton","withRouter","props","useForm","mode","register","handleSubmit","watch","setError","errors","formState","dispatch","useDispatch","password","useRef","current","useState","ShowPassword","setShowPassword","onSubmit","data","a","console","log","checkUser","email","then","response","payload","success","registerUser","alert","name","history","push","type","message","catch","error","className","src","Logo","id","placeholder","pattern","value","every","test","checkNumber","IconButton","onClick","passwordConfirm","to","Register","Content"],"mappings":"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","file":"static/js/11.a7cf1275.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.5efb2061.png\";","// 이메일\nexport const EmailError = {\n  required: '이메일을 입력해주세요.',\n  checkPattern: '이메일 형식이 올바르지 않습니다.',\n};\n\n// 비밀번호\nexport const PasswordError = {\n  required: '비밀번호를 입력해주세요.',\n  minLength: '비밀번호를 8글자 이상 입력해주세요.',\n  maxLength: '비밀번호를 20글자 이내로 입력해주세요.',\n  checkLower: '비밀번호에 소문자를 포함해주세요.',\n  checkUpper: '비밀번호에 대문자를 포함해주세요.',\n  checkSpec: '비밀번호에 특수문자를 포함해주세요.',\n  checkLang: '비밀번호에 한글은 포함할 수 없습니다.',\n};\n\n// 비밀번호 확인\nexport const PasswordConfirmError = {\n  required: '비밀번호를 다시 입력해주세요.',\n  validate: '비밀번호가 일치하지 않습니다.',\n};\n\n// 이름\nexport const NameError = {\n  required: '닉네임을 입력해주세요.',\n  minLength: '닉네임을 2글자 이상 입력해주세요.',\n  maxLength: '닉네임을 10글자 이내로 작성해주세요.',\n};\n","import styled from 'styled-components';\n\nexport const FormBox = styled.form`\n  font-family: 'SCDream';\n  margin: 0 auto;\n  width: 600px;\n  padding: 50px;\n  padding-top: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  transition: all 0.2s;\n\n  .google-img {\n    width: 30px;\n    margin: 0 auto;\n    cursor: pointer;\n  }\n`;\n\nexport const Title = styled.form`\n  font-size: 25px;\n  font-weight: 900;\n  display: flex;\n  justify-content: left;\n  margin-left: 100px;\n  margin-bottom: 14px;\n  margin-top: 12px;\n  letter-spacing: 1.2px;\n`;\n\nexport const FormTitle = styled.div`\n  font-size: 50px;\n  font-weight: 900;\n  display: flex;\n  justify-content: center;\n  margin-bottom: -14px;\n  letter-spacing: 1.2px;\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  .logo-img {\n    width: 70px;\n    padding-top: 5px;\n    padding-right: 5px;\n  }\n`;\n\nexport const FormSmallTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 16px;\n  margin-bottom: 13px;\n`;\n\nexport const InputBox = styled.div`\n  margin-bottom: 3px;\n  width: 100%;\n  position: relative;\n  display: flex;\n  margin-left: 110px;\n  flex-direction: column;\n  align-items: start;\n  & label {\n    display: flex;\n    align-items: start;\n    font-size: 14px;\n    font-weight: 700;\n    margin-right: 220px;\n  }\n  &: focus-within {\n    color: #4957a5;\n  }\n`;\n\n/**아이디 비밀번호 치는 디자인 */\nexport const FilledInput = styled.input`\n  position: relative;\n  width: 280px;\n  height: 48px;\n  padding: 0 20px;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  background-color: #eee;\n  font-weight: 500;\n`;\nexport const GoogleImg = styled.img`\n  width: 10px;\n`;\nexport const ErrorMessage = styled.p`\n  color: #de506b;\n  font-size: 11px;\n  padding: 4px 4px;\n  font-weight: 700;\n`;\n\nexport const PasswordBox = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\nexport const PasswordButton = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 205px;\n  margin-bottom: 12px;\n`;\n\nexport const LoginButton = styled.button`\n  margin: 0 auto;\n  width: 280px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #c5ad81;\n  color: #fff;\n  font-weight: 700;\n\n  &:active {\n    opacity: 0.7;\n  }\n`;\n\nexport const GoogleItem = styled.div`\n  font-size: 10px;\n  margin: 0 auto;\n\n  .button {\n    background-color: white;\n    width: 50px;\n  }\n`;\n\nexport const TextBox = styled.div`\n  width: 100%;\n  margin-top: 10px;\n  font-size: 14px;\n  text-align: center;\n  padding-right: 17px;\n  & span {\n    font-size: 14px;\n    font-weight: 500;\n    color: #aaa;\n  }\n  & a span {\n    color: #c5ad81;\n    font-weight: 600;\n  }\n`;\n\nexport const RadioBox = styled.div`\n  margin-top: 10px;\n  width: 100%;\n  position: relative;\n  display: flex;\n  margin-left: 110px;\n  flex-direction: row;\n  align-items: start;\n  font-size: 14px;\n  & label {\n    display: flex;\n    align-items: start;\n    font-size: 14px;\n    font-weight: 700;\n    margin-right: 140px;\n  }\n  &: focus-within {\n    color: #4957a5;\n  }\n`;\n\nexport const RegistButton = styled.button`\n  margin: 0 auto;\n  width: 280px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #c5ad81;\n  color: #fff;\n  font-weight: 700;\n  margin-top: 10px;\n  &:active {\n    opacity: 0.7;\n  }\n`;\n","import React, { useRef, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { registerUser, checkUser } from 'modules/actions/user';\nimport { useForm } from 'react-hook-form';\nimport Logo from 'assests/Logo.png';\nimport {\n  PasswordError,\n  PasswordConfirmError,\n  NameError,\n} from 'library/options/errors';\nimport {\n  FormBox,\n  FormTitle,\n  FormSmallTitle,\n  InputBox,\n  PasswordBox,\n  PasswordButton,\n  RegistButton,\n  FilledInput,\n  ErrorMessage,\n  TextBox,\n} from 'styles/form/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nfunction RegisterPage(props) {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setError,\n    formState: { errors },\n  } = useForm({\n    mode: 'onTouched',\n  });\n  const dispatch = useDispatch();\n  const password = useRef();\n  password.current = watch('password');\n\n  const [ShowPassword, setShowPassword] = useState(false);\n  const handleVisibility = () => {\n    setShowPassword(!ShowPassword);\n  };\n\n  const onSubmit = async data => {\n    console.log(data);\n    try {\n      await dispatch(checkUser(data.email))\n        .then(response => {\n          if (response.payload.success) {\n            dispatch(registerUser(data));\n            alert(`${data.name}님 회원가입을 축하드립니다.`);\n            props.history.push('/login');\n          } else {\n            setError('email', {\n              type: 'validate',\n              message: response.payload.message,\n            });\n          }\n        })\n        .catch(error => {\n          console.log('response: ', error.response);\n        });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <FormBox onSubmit={handleSubmit(onSubmit)}>\n        <FormTitle>\n          <div className=\"logo-img\">\n            <img src={Logo} />\n          </div>\n          <div>QUOTKA</div>\n        </FormTitle>\n        <FormSmallTitle>회원가입</FormSmallTitle>\n        <InputBox>\n          <FilledInput\n            id=\"name\"\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"닉네임\"\n            {...register('name', {\n              required: true,\n              minLength: true,\n              minLength: 2,\n              maxLength: 10,\n            })}\n          />\n          {errors.name && (\n            <ErrorMessage>{NameError[errors.name.type]}</ErrorMessage>\n          )}\n        </InputBox>\n\n        <InputBox>\n          <FilledInput\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"이메일\"\n            {...register('email', {\n              required: '이메일 형식에 맞게 입력해주세요.',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                message: '이메일 형식이 올바르지 않습니다.',\n              },\n            })}\n          />\n          {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}\n        </InputBox>\n        <InputBox>\n          <PasswordBox>\n            <FilledInput\n              id=\"password\"\n              name=\"password\"\n              type={ShowPassword ? 'text' : 'password'}\n              placeholder=\"비밀번호\"\n              {...register('password', {\n                required: true,\n                minLength: 8,\n                maxLength: 20,\n                validate: {\n                  checkLang: value =>\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\n                      pattern.test(value),\n                    ),\n                  checkLower: value =>\n                    [/[a-z]/].every(pattern => pattern.test(value)),\n                  checkUpper: value =>\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\n                  checkNumber: value =>\n                    [/[0-9]/].every(pattern => pattern.test(value)),\n                  checkSpec: value =>\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\n                },\n              })}\n            />\n            <PasswordButton>\n              <IconButton\n                aria-label=\"toggle_password\"\n                onClick={handleVisibility}\n              >\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </PasswordButton>\n          </PasswordBox>\n          {errors.password && (\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\n          )}\n        </InputBox>\n        <InputBox>\n          <FilledInput\n            id=\"confirmpassword\"\n            name=\"confirmpassword\"\n            type=\"password\"\n            placeholder=\"비밀번호 확인\"\n            {...register('passwordConfirm', {\n              required: true,\n              validate: value => value === password.current,\n            })}\n          />\n          {errors.passwordConfirm && (\n            <ErrorMessage>\n              {PasswordConfirmError[errors.passwordConfirm.type]}\n            </ErrorMessage>\n          )}\n        </InputBox>\n        <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\n          회원가입\n        </RegistButton>\n        <TextBox>\n          <span>이미 QUOTKA 회원이신가요?</span>\n          <Link to=\"/login\">\n            <span>로그인</span>\n          </Link>\n        </TextBox>\n      </FormBox>\n    </>\n  );\n}\n\nexport default withRouter(RegisterPage);\n","import React from 'react';\nimport Content from 'components/Register/Content';\n\nconst Register = () => {\n  return <Content />;\n};\n\nexport default Register;\n"],"sourceRoot":""}