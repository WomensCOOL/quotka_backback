{"version":3,"sources":["assests/Logo.png","library/options/errors.js","styles/form/styles.js","components/Register/Content.js","pages/Register.js"],"names":["EmailError","required","checkPattern","PasswordError","minLength","maxLength","checkLower","checkUpper","checkSpec","checkLang","PasswordConfirmError","validate","NameError","FormBox","styled","form","FormTitle","div","FormSmallTitle","InputBox","FilledInput","input","ErrorMessage","img","p","PasswordBox","PasswordButton","LoginButton","button","GoogleItem","TextBox","RegistButton","withRouter","props","useForm","mode","register","handleSubmit","watch","setError","errors","formState","dispatch","useDispatch","password","useRef","current","useState","ShowPassword","setShowPassword","onSubmit","data","a","console","log","checkUser","email","then","response","payload","success","registerUser","alert","name","history","push","type","message","catch","error","className","src","Logo","id","placeholder","pattern","value","every","test","checkNumber","IconButton","onClick","passwordConfirm","to","Register","Content"],"mappings":"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","file":"static/js/11.57769772.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo.5efb2061.png\";","// 이메일\r\nexport const EmailError = {\r\n  required: '이메일을 입력해주세요.',\r\n  checkPattern: '이메일 형식이 올바르지 않습니다.',\r\n};\r\n\r\n// 비밀번호\r\nexport const PasswordError = {\r\n  required: '비밀번호를 입력해주세요.',\r\n  minLength: '비밀번호를 8글자 이상 입력해주세요.',\r\n  maxLength: '비밀번호를 20글자 이내로 입력해주세요.',\r\n  checkLower: '비밀번호에 소문자를 포함해주세요.',\r\n  checkUpper: '비밀번호에 대문자를 포함해주세요.',\r\n  checkSpec: '비밀번호에 특수문자를 포함해주세요.',\r\n  checkLang: '비밀번호에 한글은 포함할 수 없습니다.',\r\n};\r\n\r\n// 비밀번호 확인\r\nexport const PasswordConfirmError = {\r\n  required: '비밀번호를 다시 입력해주세요.',\r\n  validate: '비밀번호가 일치하지 않습니다.',\r\n};\r\n\r\n// 이름\r\nexport const NameError = {\r\n  required: '닉네임을 입력해주세요.',\r\n  minLength: '닉네임을 2글자 이상 입력해주세요.',\r\n  maxLength: '닉네임을 10글자 이내로 작성해주세요.',\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const FormBox = styled.form`\r\n  font-family: 'SCDream';\r\n  margin: 0 auto;\r\n  width: 600px;\r\n  padding: 50px;\r\n  padding-top: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  transition: all 0.2s;\r\n\r\n  .google-img {\r\n    width: 30px;\r\n    margin: 0 auto;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.form`\r\n  font-size: 25px;\r\n  font-weight: 900;\r\n  display: flex;\r\n  justify-content: left;\r\n  margin-left: 100px;\r\n  margin-bottom: 14px;\r\n  margin-top: 12px;\r\n  letter-spacing: 1.2px;\r\n`;\r\n\r\nexport const FormTitle = styled.div`\r\n  font-size: 50px;\r\n  font-weight: 900;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: -14px;\r\n  letter-spacing: 1.2px;\r\n\r\n  img {\r\n    max-width: 100%;\r\n    height: auto;\r\n  }\r\n\r\n  .logo-img {\r\n    width: 70px;\r\n    padding-top: 5px;\r\n    padding-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const FormSmallTitle = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  margin-bottom: 13px;\r\n`;\r\n\r\nexport const InputBox = styled.div`\r\n  margin-bottom: 3px;\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  margin-left: 110px;\r\n  flex-direction: column;\r\n  align-items: start;\r\n  & label {\r\n    display: flex;\r\n    align-items: start;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    margin-right: 220px;\r\n  }\r\n  &: focus-within {\r\n    color: #4957a5;\r\n  }\r\n`;\r\n\r\n/**아이디 비밀번호 치는 디자인 */\r\nexport const FilledInput = styled.input`\r\n  position: relative;\r\n  width: 280px;\r\n  height: 48px;\r\n  padding: 0 20px;\r\n  border: 1px solid #eee;\r\n  border-radius: 8px;\r\n  background-color: #eee;\r\n  font-weight: 500;\r\n`;\r\nexport const GoogleImg = styled.img`\r\n  width: 10px;\r\n`;\r\nexport const ErrorMessage = styled.p`\r\n  color: #de506b;\r\n  font-size: 11px;\r\n  padding: 4px 4px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const PasswordBox = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const PasswordButton = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 205px;\r\n  margin-bottom: 12px;\r\n`;\r\n\r\nexport const LoginButton = styled.button`\r\n  margin: 0 auto;\r\n  width: 280px;\r\n  height: 50px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  background-color: #c5ad81;\r\n  color: #fff;\r\n  font-weight: 700;\r\n\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nexport const GoogleItem = styled.div`\r\n  font-size: 10px;\r\n  margin: 0 auto;\r\n\r\n  .button {\r\n    background-color: white;\r\n    width: 50px;\r\n  }\r\n`;\r\n\r\nexport const TextBox = styled.div`\r\n  width: 100%;\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  padding-right: 17px;\r\n  & span {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    color: #aaa;\r\n  }\r\n  & a span {\r\n    color: #c5ad81;\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nexport const RadioBox = styled.div`\r\n  margin-top: 10px;\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  margin-left: 110px;\r\n  flex-direction: row;\r\n  align-items: start;\r\n  font-size: 14px;\r\n  & label {\r\n    display: flex;\r\n    align-items: start;\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    margin-right: 140px;\r\n  }\r\n  &: focus-within {\r\n    color: #4957a5;\r\n  }\r\n`;\r\n\r\nexport const RegistButton = styled.button`\r\n  margin: 0 auto;\r\n  width: 280px;\r\n  height: 50px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  background-color: #c5ad81;\r\n  color: #fff;\r\n  font-weight: 700;\r\n  margin-top: 10px;\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n","import React, { useRef, useState } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerUser, checkUser } from 'modules/actions/user';\r\nimport { useForm } from 'react-hook-form';\r\nimport Logo from 'assests/Logo.png';\r\nimport {\r\n  PasswordError,\r\n  PasswordConfirmError,\r\n  NameError,\r\n} from 'library/options/errors';\r\nimport {\r\n  FormBox,\r\n  FormTitle,\r\n  FormSmallTitle,\r\n  InputBox,\r\n  PasswordBox,\r\n  PasswordButton,\r\n  RegistButton,\r\n  FilledInput,\r\n  ErrorMessage,\r\n  TextBox,\r\n} from 'styles/form/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nfunction RegisterPage(props) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: 'onTouched',\r\n  });\r\n  const dispatch = useDispatch();\r\n  const password = useRef();\r\n  password.current = watch('password');\r\n\r\n  const [ShowPassword, setShowPassword] = useState(false);\r\n  const handleVisibility = () => {\r\n    setShowPassword(!ShowPassword);\r\n  };\r\n\r\n  const onSubmit = async data => {\r\n    console.log(data);\r\n    try {\r\n      await dispatch(checkUser(data.email))\r\n        .then(response => {\r\n          if (response.payload.success) {\r\n            dispatch(registerUser(data));\r\n            alert(`${data.name}님 회원가입을 축하드립니다.`);\r\n            props.history.push('/login');\r\n          } else {\r\n            setError('email', {\r\n              type: 'validate',\r\n              message: response.payload.message,\r\n            });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log('response: ', error.response);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormBox onSubmit={handleSubmit(onSubmit)}>\r\n        <FormTitle>\r\n          <div className=\"logo-img\">\r\n            <img src={Logo} />\r\n          </div>\r\n          <div>QUOTKA</div>\r\n        </FormTitle>\r\n        <FormSmallTitle>회원가입</FormSmallTitle>\r\n        <InputBox>\r\n          <FilledInput\r\n            id=\"name\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"닉네임\"\r\n            {...register('name', {\r\n              required: true,\r\n              minLength: true,\r\n              minLength: 2,\r\n              maxLength: 10,\r\n            })}\r\n          />\r\n          {errors.name && (\r\n            <ErrorMessage>{NameError[errors.name.type]}</ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n\r\n        <InputBox>\r\n          <FilledInput\r\n            id=\"email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"이메일\"\r\n            {...register('email', {\r\n              required: '이메일 형식에 맞게 입력해주세요.',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                message: '이메일 형식이 올바르지 않습니다.',\r\n              },\r\n            })}\r\n          />\r\n          {errors.email && <ErrorMessage>{errors.email.message}</ErrorMessage>}\r\n        </InputBox>\r\n        <InputBox>\r\n          <PasswordBox>\r\n            <FilledInput\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type={ShowPassword ? 'text' : 'password'}\r\n              placeholder=\"비밀번호\"\r\n              {...register('password', {\r\n                required: true,\r\n                minLength: 8,\r\n                maxLength: 20,\r\n                validate: {\r\n                  checkLang: value =>\r\n                    ![/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/].every(pattern =>\r\n                      pattern.test(value),\r\n                    ),\r\n                  checkLower: value =>\r\n                    [/[a-z]/].every(pattern => pattern.test(value)),\r\n                  checkUpper: value =>\r\n                    [/[A-Z]/].every(pattern => pattern.test(value)),\r\n                  checkNumber: value =>\r\n                    [/[0-9]/].every(pattern => pattern.test(value)),\r\n                  checkSpec: value =>\r\n                    [/[^a-zA-Z0-9]/].every(pattern => pattern.test(value)),\r\n                },\r\n              })}\r\n            />\r\n            <PasswordButton>\r\n              <IconButton\r\n                aria-label=\"toggle_password\"\r\n                onClick={handleVisibility}\r\n              >\r\n                {ShowPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </PasswordButton>\r\n          </PasswordBox>\r\n          {errors.password && (\r\n            <ErrorMessage>{PasswordError[errors.password.type]}</ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <InputBox>\r\n          <FilledInput\r\n            id=\"confirmpassword\"\r\n            name=\"confirmpassword\"\r\n            type=\"password\"\r\n            placeholder=\"비밀번호 확인\"\r\n            {...register('passwordConfirm', {\r\n              required: true,\r\n              validate: value => value === password.current,\r\n            })}\r\n          />\r\n          {errors.passwordConfirm && (\r\n            <ErrorMessage>\r\n              {PasswordConfirmError[errors.passwordConfirm.type]}\r\n            </ErrorMessage>\r\n          )}\r\n        </InputBox>\r\n        <RegistButton type=\"submit\" onClick={handleSubmit(onSubmit)}>\r\n          회원가입\r\n        </RegistButton>\r\n        <TextBox>\r\n          <span>이미 QUOTKA 회원이신가요?</span>\r\n          <Link to=\"/login\">\r\n            <span>로그인</span>\r\n          </Link>\r\n        </TextBox>\r\n      </FormBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(RegisterPage);\r\n","import React from 'react';\r\nimport Content from 'components/Register/Content';\r\n\r\nconst Register = () => {\r\n  return <Content />;\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}